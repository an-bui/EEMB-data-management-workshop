---
title: "Cleaning"
execute:
  message: false
  warning: false
engine: knitr
knitr:
  opts_chunk: 
    R.options:
      width: 120
---

![](images/40488240-4609-4dc3-8920-693e078b55ce.jpg){fig-align="center"}

[Artwork by [Allison Horst](https://twitter.com/allison_horst)]{style="color: grey; font-size: 12px"} 


```{r}
#| echo: false

library(tidyverse)
library(janitor)
library(here)

global_catch <- read_csv(here("data", # data is in the "data" folder in this repository
                         "global-fishery-catch-by-sector.csv")) # file name
```

## Cleaning up

We're going to keep using the data from the "Looking at your data" section, but now we're going to clean it. The big functions we'll use are:  

- `clean_names()`: cleans up column names  
- `mutate()`: creates new columns, changes columns (very powerful when used with `case_when()`)  
- `select()`: _selects_ columns from a data frame
- `pivot_longer()`: puts the data frame in "long format" (each row is an observation)  
- `rename()`: renames columns
- `filter()`: filters data frame

## The original data frame

Just to remind ourselves, this is what the original data frame looks like:

```{r}
sample_n(
  global_catch,
  size = 10
)
```

## Making column names nicer 

{{< fa rocket >}} **Function:** `clean_names()`  
{{< fa cube >}} **Package:** `janitor`

```{r}
global_catch %>% 
  # new function: clean_names
  # makes the column names nicer! 
  # compare this with the column names from `colnames(global_catch)` output
  clean_names()
```

## Creating new columns

{{< fa rocket >}} **Function:** `mutate()`  
{{< fa cube >}} **Package:** `dplyr` (in `tidyverse`)  

In this line of code, we're calculating catch in million tons.

```{r}
global_catch %>% 
  clean_names() %>% # same as above

  # new function: mutate
  # create new columns to calculate catch divided by 1000000
  mutate(artisanal_mil_tons = artisanal_small_scale_commercial/1000000,
         industrial_mil_tons = industrial_large_scale_commercial/1000000,
         subsistence_mil_tons = subsistence/1000000) 
```


## Selecting columns of interest

{{< fa rocket >}} **Function:** `select()`  
{{< fa cube >}} **Package:** `dplyr` (in `tidyverse`)  

```{r}
global_catch %>% 
  clean_names() %>% 
  mutate(artisanal_mil_tons = artisanal_small_scale_commercial/1000000,
         industrial_mil_tons = industrial_large_scale_commercial/1000000,
         subsistence_mil_tons = subsistence/1000000) %>% # same as above
  
  # new function: select
  # select the columns you're interested in 
  select(year, artisanal_mil_tons, industrial_mil_tons, subsistence_mil_tons)
```

## Putting the data frame in long format

{{< fa rocket >}} **Function:** `pivot_longer()`  
{{< fa cube >}} **Package:** `dplyr` (in `tidyverse`)  

```{r}
global_catch %>% 
  clean_names() %>% 
  mutate(artisanal_mil_tons = artisanal_small_scale_commercial/1000000,
         industrial_mil_tons = industrial_large_scale_commercial/1000000,
         subsistence_mil_tons = subsistence/1000000) %>% 
  select(year, artisanal_mil_tons, industrial_mil_tons, subsistence_mil_tons) %>% # same as above
  
  # new function: pivot_longer
  # put the data frame in long format: each row is an observation
  # in this case, each row is a fishery with some catch (in million tons) in a given year
  pivot_longer(cols = artisanal_mil_tons:subsistence_mil_tons)
```

:::{.callout-note}
### Compare this with the output from the "Creating new columns" section
There are still 3 columns in this data frame, but now there's a column called `name` and another called `value`. Each row is the catch in million tons for a fisher (either `artisanal`, `industrial`, or `subsistence`) in a given year.
:::

## Renaming columns

{{< fa rocket >}} **Function:** `rename()`  
{{< fa cube >}} **Package:** `dplyr` (in `tidyverse`)  

```{r}
global_catch %>% 
  clean_names() %>% 
  mutate(artisanal_mil_tons = artisanal_small_scale_commercial/1000000,
         industrial_mil_tons = industrial_large_scale_commercial/1000000,
         subsistence_mil_tons = subsistence/1000000) %>% 
  select(year, artisanal_mil_tons, industrial_mil_tons, subsistence_mil_tons) %>% 
  pivot_longer(cols = artisanal_mil_tons:subsistence_mil_tons) %>% # same as above
  
  # new function: rename
  # renames columns so that they are easier to understand
  # arguments: "new name" = "old name"
  rename(catch_mil = value,
         fishery_type = name) 
```

## Creating a new column based on an existing column

{{< fa rocket >}} **Function:** `case_when()` and `mutate()`    
{{< fa cube >}} **Package:** `dplyr` (in `tidyverse`)  

This creates a new column with the "full name" for each fishery!

```{r}
global_catch %>% 
  clean_names() %>% 
  mutate(artisanal_mil_tons = artisanal_small_scale_commercial/1000000,
         industrial_mil_tons = industrial_large_scale_commercial/1000000,
         subsistence_mil_tons = subsistence/1000000) %>% 
  select(year, artisanal_mil_tons, industrial_mil_tons, subsistence_mil_tons) %>% 
  pivot_longer(cols = artisanal_mil_tons:subsistence_mil_tons) %>% 
  rename(catch_mil = value,
         fishery_type = name) %>% # same as above
  
  # new function: mutate with case_when
  # creates new column of full names for fisheries
  mutate(fishery_full_name = case_when(
    # if the fishery_type is artisanal, then name it "Artisanal fishery"
    fishery_type == "artisanal" ~ "Artisanal fishery", 
    # if the fishery_type is industrial, then name it "Industrial fishery"
    fishery_type == "industrial" ~ "Industrial fishery",
    # if the fishery_type is subsistence, then name it "Subsistence fishery"
    fishery_type == "subsistence" ~ "Subsistence fishery"
  ))
```

## Filtering the data frame based on what's in a column

{{< fa rocket >}} **Function:** `filter()`   
{{< fa cube >}} **Package:** `dplyr` (in `tidyverse`)  

This filters the data frame to only include observations after 1980 in the `year` column.

```{r}
global_catch %>% 
  clean_names() %>% 
  mutate(artisanal_mil_tons = artisanal_small_scale_commercial/1000000,
         industrial_mil_tons = industrial_large_scale_commercial/1000000,
         subsistence_mil_tons = subsistence/1000000) %>% 
  select(year, artisanal_mil_tons, industrial_mil_tons, subsistence_mil_tons) %>% 
  pivot_longer(cols = artisanal_mil_tons:subsistence_mil_tons) %>% 
  rename(catch_mil = value,
         fishery_type = name) %>% 
  mutate(fishery_full_name = case_when(
    # if the fishery_type is artisanal, then name it "Artisanal fishery"
    fishery_type == "artisanal" ~ "Artisanal fishery", 
    # if the fishery_type is industrial, then name it "Industrial fishery"
    fishery_type == "industrial" ~ "Industrial fishery",
    # if the fishery_type is subsistence, then name it "Subsistence fishery"
    fishery_type == "subsistence" ~ "Subsistence fishery"
  )) %>% # same as above
  
  # new function: filter
  # filters data frame for observations after 1980
  filter(year > 1980)
```


## Putting it all together

All together to create a data frame called `global_catch_clean`

```{r}
global_catch_clean <- global_catch %>% 
  
  # makes the column names nicer
  clean_names() %>% 
  
  # divides catch by 1000000 to calculate catch in million tons
  mutate(artisanal_mil_tons = artisanal_small_scale_commercial/1000000,
         industrial_mil_tons = industrial_large_scale_commercial/1000000,
         subsistence_mil_tons = subsistence/1000000) %>% 
  
  # selecting columns
  select(year, artisanal_mil_tons, industrial_mil_tons, subsistence_mil_tons) %>% 
  
  # put the data frame in long format: each row is an observation
  pivot_longer(cols = artisanal_mil_tons:subsistence_mil_tons) %>% 
  
  # renames columns so that they are easier to understand
  rename(catch_mil = value,
         fishery_type = name) %>% 
  
  # creates new column of full names for fisheries
  mutate(fishery_full_name = case_when(
    fishery_type == "artisanal" ~ "Artisanal fishery",
    fishery_type == "industrial" ~ "Industrial fishery",
    fishery_type == "subsistence" ~ "Subsistence fishery"
  )) %>% 
  
  # filters data frame for observations after 1980
  filter(year > 1980)
```

And just a quick look at this:

```{r}
sample_n(global_catch_clean,
         size = 10)
```



