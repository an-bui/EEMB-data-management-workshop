{
  "hash": "29227d9db4037f6500c0681e2502d85b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Reading your data into RStudio\"\nexecute:\n  eval: false\n---\n\n\n# Ways to read in data\n\nThere are lots of ways that you can read your data into RStudio, depending on the format of your data (.csv, .xlsx, etc.) and where it is (for example, if you have a folder called `data` in which your data lives, or if your data is in the same folder as your code).  \n\nThese are a few examples of different ways of reading in your data, but experiment with different set ups to see what works for you!\n\n## If your file is a `.csv`\n\nIf your file is in the root directory (i.e. the same folder as the .Rproj file)\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data <- read_csv(\"data.csv\") # just the file name\n```\n:::\n\n\n## Using the `here` package\n\n`here` allows you to specify file paths without using relative file paths (like slashes). This makes it easier for people on different operating systems to use your code.  \n\nIn this example, the `data.csv` is in a folder called `data`.  \n\n`read_csv()` wraps around the `here(\"data\", \"data.csv\")` function to read in the `data.csv` file in the `data` folder.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data <- read_csv(here(\"data\", # folder name: data\n                           \"data.csv\")) # file name: data.csv\n```\n:::\n\n\n## If your file is a `.xlsx`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_from_excel <- read_xlsx(\"data.xlsx\", # file name\n                             sheet = \"This is the sheet name\", # if there are multiple sheets in the .xlsx file\n                             na = c(\"NA\")) # explicitly name what the NAs are in the sheet - not necessary, but sometimes nice!\n```\n:::\n\n\n## If your file is on Dropbox:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_from_dropbox <- source_data(\"share link goes here\") # paste the share link, change dl=0 to dl=1 at the end (don't know why but it works!)\n```\n:::\n\n\n[Directions](https://github.com/lecy/Import-Data-Into-R/blob/master/import%20from%20dropbox.md)\n\n## If your file is on Google Sheets:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get the sheet id from the url\nsheet_id <- \"insert sheet id here\"\n\ndata_from_google_sheets <- read_sheet(sheet_id, # the sheet id that you stored above\n                                      sheet = \"insert sheet name here\") # if you have multiple sheets, you can select the sheet you want\n```\n:::\n\n\n:::{.callout-note}\n## Authentication with `googlesheets4`\n\nNote that when you run this, `googlesheets4` will ask for authentication. Critically, this only works if you are there to interact with the package (i.e. actually authenticate yourself); therefore, this _is not a good option_ if you are rendering/knitting your code. One solution is to make the sheet public (which isn't always ideal). Another solution is to have a separate script in your project that reads stuff in from Google Sheets and creates .csv files on your computer, and use the .csv files downloaded from Google Sheets in your down stream analysis. \n:::\n\n",
    "supporting": [
      "02_reading-your-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}