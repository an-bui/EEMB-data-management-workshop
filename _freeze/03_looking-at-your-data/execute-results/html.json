{
  "hash": "8d59a73700245691ed630cacadd27c03",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Looking at your data\"\nexecute:\n  message: false\n  warning: false\n---\n\n\n## Data source\n\nIn this example, we're going to use global fishery catch data from [Tidy Tuesday 2021-10-12](https://github.com/rfordatascience/tidytuesday/blob/master/data/2021/2021-10-12/readme.md).  \n\n## Set up\n\nFirst, we'll read in the packages we need:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse) # general use\nlibrary(here) # file path organization\nlibrary(skimr) # quick summary stats \n```\n:::\n\n\nThen, we'll read in the data: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# creating a new object called `global_catch`\nglobal_catch <- read_csv(here(\"data\", # data is in the \"data\" folder in this repository\n                              \"global-fishery-catch-by-sector.csv\")) # file name\n```\n:::\n\n\n## Quick look at the data using `glimpse()` and `str()`\n\n`glimpse()` and `str()` both give a sense of the kinds of variables (numeric, factor, etc.) that are in each column, along with the contents of the columns and the column names.  \n\n`glimpse()` gives similar information as `str()`: use either (or both!).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(global_catch)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 61\nColumns: 8\n$ Entity                                <chr> \"World\", \"World\", \"World\", \"Worl…\n$ Code                                  <chr> \"OWID_WRL\", \"OWID_WRL\", \"OWID_WR…\n$ Year                                  <dbl> 1950, 1951, 1952, 1953, 1954, 19…\n$ `Artisanal (small-scale commercial)`  <dbl> 7526795, 8278304, 8272109, 84692…\n$ Discards                              <dbl> 5874170, 6278225, 7230311, 71729…\n$ `Industrial (large-scale commercial)` <dbl> 14566338, 15417937, 16463942, 17…\n$ Recreational                          <dbl> 268260, 284319, 293558, 292070, …\n$ Subsistence                           <dbl> 2677833, 2704471, 2728141, 27530…\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nstr(global_catch)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nspc_tbl_ [61 × 8] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Entity                             : chr [1:61] \"World\" \"World\" \"World\" \"World\" ...\n $ Code                               : chr [1:61] \"OWID_WRL\" \"OWID_WRL\" \"OWID_WRL\" \"OWID_WRL\" ...\n $ Year                               : num [1:61] 1950 1951 1952 1953 1954 ...\n $ Artisanal (small-scale commercial) : num [1:61] 7526795 8278304 8272109 8469284 9226926 ...\n $ Discards                           : num [1:61] 5874170 6278225 7230311 7172937 8012930 ...\n $ Industrial (large-scale commercial): num [1:61] 14566338 15417937 16463942 17163789 18340199 ...\n $ Recreational                       : num [1:61] 268260 284319 293558 292070 304398 ...\n $ Subsistence                        : num [1:61] 2677833 2704471 2728141 2753098 2895153 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   Entity = col_character(),\n  ..   Code = col_character(),\n  ..   Year = col_double(),\n  ..   `Artisanal (small-scale commercial)` = col_double(),\n  ..   Discards = col_double(),\n  ..   `Industrial (large-scale commercial)` = col_double(),\n  ..   Recreational = col_double(),\n  ..   Subsistence = col_double()\n  .. )\n - attr(*, \"problems\")=<externalptr> \n```\n\n\n:::\n:::\n\n\n## Getting the column names using `colnames()`\n\nYou'll be using the column names of your data frame _a lot_ - you can use `colnames()` to figure out what the names actually are.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(global_catch)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Entity\"                              \"Code\"                               \n[3] \"Year\"                                \"Artisanal (small-scale commercial)\" \n[5] \"Discards\"                            \"Industrial (large-scale commercial)\"\n[7] \"Recreational\"                        \"Subsistence\"                        \n```\n\n\n:::\n:::\n\n\n## A random sample of rows using `sample_n()`\n\nYou can get a quick look at a random sample of rows from the data frame using `sample_n()` to get a sense of what each row might look like.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_n(global_catch, # the data frame\n         size = 10) # the number of rows to view\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 8\n   Entity Code      Year Artisanal (small-scal…¹ Discards Industrial (large-sc…²\n   <chr>  <chr>    <dbl>                   <dbl>    <dbl>                  <dbl>\n 1 World  OWID_WRL  1986                16227297 15091641               78606140\n 2 World  OWID_WRL  1972                12753562 12357980               51789011\n 3 World  OWID_WRL  1969                12211407 12761884               52626777\n 4 World  OWID_WRL  1987                17449809 15669889               79755589\n 5 World  OWID_WRL  1992                18417117 15717869               81793283\n 6 World  OWID_WRL  1999                20588769 12426124               84833508\n 7 World  OWID_WRL  1980                14688464 10500231               60489781\n 8 World  OWID_WRL  1976                13761132 11095856               59084000\n 9 World  OWID_WRL  1975                13432664 11313080               55854975\n10 World  OWID_WRL  1998                20332081 13154260               79574228\n# ℹ abbreviated names: ¹​`Artisanal (small-scale commercial)`,\n#   ²​`Industrial (large-scale commercial)`\n# ℹ 2 more variables: Recreational <dbl>, Subsistence <dbl>\n```\n\n\n:::\n:::\n\n\n## Summary stats and more with `skim()`\n\nThe `skim()` function in the `skimr` package gives you a bunch of summary information about the data in each column. Note that this is _a lot_ of information, but if you want some broad brush strokes level summary (e.g. what's the mean in each column?), then `skim()` might be a good option!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nskim(global_catch)\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |             |\n|:------------------------|:------------|\n|Name                     |global_catch |\n|Number of rows           |61           |\n|Number of columns        |8            |\n|_______________________  |             |\n|Column type frequency:   |             |\n|character                |2            |\n|numeric                  |6            |\n|________________________ |             |\n|Group variables          |None         |\n\n\n**Variable type: character**\n\n|skim_variable | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:-------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|Entity        |         0|             1|   5|   5|     0|        1|          0|\n|Code          |         0|             1|   8|   8|     0|        1|          0|\n\n\n**Variable type: numeric**\n\n|skim_variable                       | n_missing| complete_rate|       mean|          sd|       p0|      p25|      p50|      p75|     p100|hist  |\n|:-----------------------------------|---------:|-------------:|----------:|-----------:|--------:|--------:|--------:|--------:|--------:|:-----|\n|Year                                |         0|             1|     1980.0|       17.75|     1950|     1965|     1980|     1995|     2010|▇▇▇▇▇ |\n|Artisanal (small-scale commercial)  |         0|             1| 15180177.2|  4255916.20|  7526795| 11653978| 14688464| 19665232| 21828623|▅▇▆▅▇ |\n|Discards                            |         0|             1| 11834829.3|  2601005.59|  5874170| 10014530| 11712961| 13595692| 16962727|▂▃▇▆▃ |\n|Industrial (large-scale commercial) |         0|             1| 59491189.3| 24241541.41| 14566338| 41475194| 62459956| 80593708| 90068159|▃▂▃▃▇ |\n|Recreational                        |         0|             1|   609926.8|   194120.54|   268260|   405857|   731511|   769491|   849021|▃▂▁▁▇ |\n|Subsistence                         |         0|             1|  3777210.0|   416715.61|  2677833|  3630156|  3911536|  4072844|  4226487|▂▂▁▆▇ |\n\n\n:::\n:::\n",
    "supporting": [
      "03_looking-at-your-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}