{
  "hash": "5c7cb82be2a6b6e60deab74be10614e0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Cleaning\"\nexecute:\n  message: false\n  warning: false\n---\n\n\n![](images/40488240-4609-4dc3-8920-693e078b55ce.jpg){fig-align=\"center\"}\n\n[Artwork by [Allison Horst](https://twitter.com/allison_horst)]{style=\"color: grey; font-size: 12px\"} \n\n\n\n::: {.cell}\n\n:::\n\n\n## Cleaning up\n\nWe're going to keep using the data from the \"Looking at your data\" section, but now we're going to clean it. The big functions we'll use are:  \n\n- `clean_names()`: cleans up column names  \n- `mutate()`: creates new columns, changes columns (very powerful when used with `case_when()`)  \n- `select()`: _selects_ columns from a data frame\n- `pivot_longer()`: puts the data frame in \"long format\" (each row is an observation)  \n- `rename()`: renames columns\n- `filter()`: filters data frame\n\n## Making column names nicer \n\n{{< fa rocket >}} **Function:** `clean_names()`  \n{{< fa cube >}} **Package:** `janitor`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_catch %>% \n  # new function: clean_names\n  # makes the column names nicer! compare this with the column names from `colnames(global_catch)` output from above\n  clean_names()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 61 × 8\n   entity code      year artisanal_small_scale…¹ discards industrial_large_sca…²\n   <chr>  <chr>    <dbl>                   <dbl>    <dbl>                  <dbl>\n 1 World  OWID_WRL  1950                 7526795  5874170               14566338\n 2 World  OWID_WRL  1951                 8278304  6278225               15417937\n 3 World  OWID_WRL  1952                 8272109  7230311               16463942\n 4 World  OWID_WRL  1953                 8469284  7172937               17163789\n 5 World  OWID_WRL  1954                 9226926  8012930               18340199\n 6 World  OWID_WRL  1955                 9545554  8340179               18728089\n 7 World  OWID_WRL  1956                10303408  8692551               19902604\n 8 World  OWID_WRL  1957                10425695  8998732               20030089\n 9 World  OWID_WRL  1958                10172920  9255992               20520801\n10 World  OWID_WRL  1959                10385711  9908003               23422702\n# ℹ 51 more rows\n# ℹ abbreviated names: ¹​artisanal_small_scale_commercial,\n#   ²​industrial_large_scale_commercial\n# ℹ 2 more variables: recreational <dbl>, subsistence <dbl>\n```\n\n\n:::\n:::\n\n\n## Creating new columns\n\n{{< fa rocket >}} **Function:** `mutate()`  \n{{< fa cube >}} **Package:** `dplyr` (in `tidyverse`)  \n\nIn this line of code, we're calculating catch in million tons.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_catch %>% \n  clean_names() %>% # same as above\n\n  # new function: mutate\n  # create new columns to calculate catch divided by 1000000\n  mutate(artisanal = artisanal_small_scale_commercial/1000000,\n         industrial = industrial_large_scale_commercial/1000000,\n         subsistence = subsistence/1000000)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 61 × 10\n   entity code      year artisanal_small_scale…¹ discards industrial_large_sca…²\n   <chr>  <chr>    <dbl>                   <dbl>    <dbl>                  <dbl>\n 1 World  OWID_WRL  1950                 7526795  5874170               14566338\n 2 World  OWID_WRL  1951                 8278304  6278225               15417937\n 3 World  OWID_WRL  1952                 8272109  7230311               16463942\n 4 World  OWID_WRL  1953                 8469284  7172937               17163789\n 5 World  OWID_WRL  1954                 9226926  8012930               18340199\n 6 World  OWID_WRL  1955                 9545554  8340179               18728089\n 7 World  OWID_WRL  1956                10303408  8692551               19902604\n 8 World  OWID_WRL  1957                10425695  8998732               20030089\n 9 World  OWID_WRL  1958                10172920  9255992               20520801\n10 World  OWID_WRL  1959                10385711  9908003               23422702\n# ℹ 51 more rows\n# ℹ abbreviated names: ¹​artisanal_small_scale_commercial,\n#   ²​industrial_large_scale_commercial\n# ℹ 4 more variables: recreational <dbl>, subsistence <dbl>, artisanal <dbl>,\n#   industrial <dbl>\n```\n\n\n:::\n:::\n\n\n## Selecting columns of interest\n\n{{< fa rocket >}} **Function:** `select()`  \n{{< fa cube >}} **Package:** `dplyr` (in `tidyverse`)  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_catch %>% \n  clean_names() %>% \n  mutate(artisanal = artisanal_small_scale_commercial/1000000,\n         industrial = industrial_large_scale_commercial/1000000,\n         subsistence = subsistence/1000000) %>% # same as above\n  \n  # new function: select\n  # select the columns you're interested in \n  select(year, artisanal, industrial)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 61 × 3\n    year artisanal industrial\n   <dbl>     <dbl>      <dbl>\n 1  1950      7.53       14.6\n 2  1951      8.28       15.4\n 3  1952      8.27       16.5\n 4  1953      8.47       17.2\n 5  1954      9.23       18.3\n 6  1955      9.55       18.7\n 7  1956     10.3        19.9\n 8  1957     10.4        20.0\n 9  1958     10.2        20.5\n10  1959     10.4        23.4\n# ℹ 51 more rows\n```\n\n\n:::\n:::\n\n\n## Putting the data frame in long format\n\n{{< fa rocket >}} **Function:** `pivot_longer()`  \n{{< fa cube >}} **Package:** `dplyr` (in `tidyverse`)  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_catch %>% \n  clean_names() %>% \n  mutate(artisanal = artisanal_small_scale_commercial/1000000,\n         industrial = industrial_large_scale_commercial/1000000,\n         subsistence = subsistence/1000000) %>% \n  select(year, artisanal, industrial, subsistence) %>% # same as above\n  \n  # new function: pivot_longer\n  # put the data frame in long format: each row is an observation\n  # in this case, each row is a fishery with some catch (in million tons) in a given year\n  pivot_longer(cols = artisanal:subsistence)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 183 × 3\n    year name        value\n   <dbl> <chr>       <dbl>\n 1  1950 artisanal    7.53\n 2  1950 industrial  14.6 \n 3  1950 subsistence  2.68\n 4  1951 artisanal    8.28\n 5  1951 industrial  15.4 \n 6  1951 subsistence  2.70\n 7  1952 artisanal    8.27\n 8  1952 industrial  16.5 \n 9  1952 subsistence  2.73\n10  1953 artisanal    8.47\n# ℹ 173 more rows\n```\n\n\n:::\n:::\n\n\n:::{.callout-note}\n### Compare this with the output from the \"Creating new columns\" section\nThere are still 3 columns in this data frame, but now there's a column called `name` and another called `value`. Each row is the catch in million tons for a fisher (either `artisanal`, `industrial`, or `subsistence`) in a given year.\n:::\n\n## Renaming columns\n\n{{< fa rocket >}} **Function:** `rename()`  \n{{< fa cube >}} **Package:** `dplyr` (in `tidyverse`)  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_catch %>% \n  clean_names() %>% \n  mutate(artisanal = artisanal_small_scale_commercial/1000000,\n         industrial = industrial_large_scale_commercial/1000000,\n         subsistence = subsistence/1000000) %>% \n  select(year, artisanal, industrial, subsistence) %>% \n  pivot_longer(cols = artisanal:subsistence) %>% # same as above\n  \n  # new function: rename\n  # renames columns so that they are easier to understand\n  # arguments: \"new name\" = \"old name\"\n  rename(catch_mil = value,\n         fishery_type = name) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 183 × 3\n    year fishery_type catch_mil\n   <dbl> <chr>            <dbl>\n 1  1950 artisanal         7.53\n 2  1950 industrial       14.6 \n 3  1950 subsistence       2.68\n 4  1951 artisanal         8.28\n 5  1951 industrial       15.4 \n 6  1951 subsistence       2.70\n 7  1952 artisanal         8.27\n 8  1952 industrial       16.5 \n 9  1952 subsistence       2.73\n10  1953 artisanal         8.47\n# ℹ 173 more rows\n```\n\n\n:::\n:::\n\n\n## Creating a new column based on an existing column\n\n{{< fa rocket >}} **Function:** `case_when()` and `mutate()`    \n{{< fa cube >}} **Package:** `dplyr` (in `tidyverse`)  \n\nThis creates a new column with the \"full name\" for each fishery!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_catch %>% \n  clean_names() %>% \n  mutate(artisanal = artisanal_small_scale_commercial/1000000,\n         industrial = industrial_large_scale_commercial/1000000,\n         subsistence = subsistence/1000000) %>% \n  select(year, artisanal, industrial, subsistence) %>% \n  pivot_longer(cols = artisanal:subsistence) %>% \n  rename(catch_mil = value,\n         fishery_type = name) %>% # same as above\n  \n  # new function: mutate with case_when\n  # creates new column of full names for fisheries\n  mutate(fishery_full_name = case_when(\n    # if the fishery_type is artisanal, then name it \"Artisanal fishery\"\n    fishery_type == \"artisanal\" ~ \"Artisanal fishery\", \n    # if the fishery_type is industrial, then name it \"Industrial fishery\"\n    fishery_type == \"industrial\" ~ \"Industrial fishery\",\n    # if the fishery_type is subsistence, then name it \"Subsistence fishery\"\n    fishery_type == \"subsistence\" ~ \"Subsistence fishery\"\n  ))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 183 × 4\n    year fishery_type catch_mil fishery_full_name  \n   <dbl> <chr>            <dbl> <chr>              \n 1  1950 artisanal         7.53 Artisanal fishery  \n 2  1950 industrial       14.6  Industrial fishery \n 3  1950 subsistence       2.68 Subsistence fishery\n 4  1951 artisanal         8.28 Artisanal fishery  \n 5  1951 industrial       15.4  Industrial fishery \n 6  1951 subsistence       2.70 Subsistence fishery\n 7  1952 artisanal         8.27 Artisanal fishery  \n 8  1952 industrial       16.5  Industrial fishery \n 9  1952 subsistence       2.73 Subsistence fishery\n10  1953 artisanal         8.47 Artisanal fishery  \n# ℹ 173 more rows\n```\n\n\n:::\n:::\n\n\n## Filtering the data frame based on what's in a column\n\n{{< fa rocket >}} **Function:** `filter()`   \n{{< fa cube >}} **Package:** `dplyr` (in `tidyverse`)  \n\nThis filters the data frame to only include observations after 1980 in the `year` column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_catch %>% \n  clean_names() %>% \n  mutate(artisanal = artisanal_small_scale_commercial/1000000,\n         industrial = industrial_large_scale_commercial/1000000,\n         subsistence = subsistence/1000000) %>% \n  select(year, artisanal, industrial, subsistence) %>% \n  pivot_longer(cols = artisanal:subsistence) %>% \n  rename(catch_mil = value,\n         fishery_type = name) %>% \n  mutate(fishery_full_name = case_when(\n    # if the fishery_type is artisanal, then name it \"Artisanal fishery\"\n    fishery_type == \"artisanal\" ~ \"Artisanal fishery\", \n    # if the fishery_type is industrial, then name it \"Industrial fishery\"\n    fishery_type == \"industrial\" ~ \"Industrial fishery\",\n    # if the fishery_type is subsistence, then name it \"Subsistence fishery\"\n    fishery_type == \"subsistence\" ~ \"Subsistence fishery\"\n  )) %>% # same as above\n  \n  # new function: filter\n  # filters data frame for observations after 1980\n  filter(year > 1980)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 90 × 4\n    year fishery_type catch_mil fishery_full_name  \n   <dbl> <chr>            <dbl> <chr>              \n 1  1981 artisanal        15.3  Artisanal fishery  \n 2  1981 industrial       62.5  Industrial fishery \n 3  1981 subsistence       3.99 Subsistence fishery\n 4  1982 artisanal        15.2  Artisanal fishery  \n 5  1982 industrial       67.5  Industrial fishery \n 6  1982 subsistence       4.08 Subsistence fishery\n 7  1983 artisanal        15.3  Artisanal fishery  \n 8  1983 industrial       65.7  Industrial fishery \n 9  1983 subsistence       4.20 Subsistence fishery\n10  1984 artisanal        16.1  Artisanal fishery  \n# ℹ 80 more rows\n```\n\n\n:::\n:::\n\n\n\n## Putting it all together\n\nAll together to create a data frame called `global_catch_clean`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_catch_clean <- global_catch %>% \n  \n  # makes the column names nicer\n  clean_names() %>% \n  \n  # divides catch by 1000000 to calculate catch in million tons\n  mutate(artisanal = artisanal_small_scale_commercial/1000000,\n         industrial = industrial_large_scale_commercial/1000000,\n         subsistence = subsistence/1000000) %>% \n  \n  # selecting columns\n  select(year, artisanal, industrial, subsistence) %>% \n  \n  # put the data frame in long format: each row is an observation\n  pivot_longer(cols = artisanal:subsistence) %>% \n  \n  # renames columns so that they are easier to understand\n  rename(catch_mil = value,\n         fishery_type = name) %>% \n  \n  # creates new column of full names for fisheries\n  mutate(fishery_full_name = case_when(\n    fishery_type == \"artisanal\" ~ \"Artisanal fishery\",\n    fishery_type == \"industrial\" ~ \"Industrial fishery\",\n    fishery_type == \"subsistence\" ~ \"Subsistence fishery\"\n  )) %>% \n  \n  # filters data frame for observations after 1980\n  filter(year > 1980)\n```\n:::\n\n\nAnd just a quick look at this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_n(global_catch_clean,\n         size = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 4\n    year fishery_type catch_mil fishery_full_name  \n   <dbl> <chr>            <dbl> <chr>              \n 1  2008 artisanal        21.1  Artisanal fishery  \n 2  1992 industrial       81.8  Industrial fishery \n 3  2006 artisanal        21.4  Artisanal fishery  \n 4  1998 artisanal        20.3  Artisanal fishery  \n 5  2004 subsistence       3.81 Subsistence fishery\n 6  1981 industrial       62.5  Industrial fishery \n 7  1996 industrial       90.1  Industrial fishery \n 8  2005 artisanal        21.0  Artisanal fishery  \n 9  1989 industrial       84.1  Industrial fishery \n10  1998 industrial       79.6  Industrial fishery \n```\n\n\n:::\n:::\n",
    "supporting": [
      "04_cleaning_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}