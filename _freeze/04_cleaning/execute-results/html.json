{
  "hash": "df2a46736e203c2a3548a5d26a1363c3",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Cleaning\"\nexecute:\n  message: false\n  warning: false\nengine: knitr\nknitr:\n  opts_chunk: \n    R.options:\n      width: 120\n---\n\n\n![](images/40488240-4609-4dc3-8920-693e078b55ce.jpg){fig-align=\"center\"}\n\n[Artwork by [Allison Horst](https://twitter.com/allison_horst)]{style=\"color: grey; font-size: 12px\"} \n\n\n\n::: {.cell}\n\n:::\n\n\n## Cleaning up\n\nWe're going to keep using the data from the \"Looking at your data\" section, but now we're going to clean it. The big functions we'll use are:  \n\n- `clean_names()`: cleans up column names  \n- `mutate()`: creates new columns, changes columns (very powerful when used with `case_when()`)  \n- `select()`: _selects_ columns from a data frame\n- `pivot_longer()`: puts the data frame in \"long format\" (each row is an observation)  \n- `rename()`: renames columns\n- `filter()`: filters data frame\n\n## The original data frame\n\nJust to remind ourselves, this is what the original data frame looks like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_n(\n  global_catch,\n  size = 10\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 8\n   Entity Code      Year `Artisanal (small-scale commercial)` Discards Industrial (large-scal…¹ Recreational Subsistence\n   <chr>  <chr>    <dbl>                                <dbl>    <dbl>                    <dbl>        <dbl>       <dbl>\n 1 World  OWID_WRL  1956                             10303408  8692551                 19902604       319333     3058523\n 2 World  OWID_WRL  2008                             21111836  9568906                 76840638       826843     3629819\n 3 World  OWID_WRL  1984                             16074619 13926837                 70609012       789467     4138484\n 4 World  OWID_WRL  1952                              8272109  7230311                 16463942       293558     2728141\n 5 World  OWID_WRL  1970                             12365128 12754841                 58881353       480642     3937638\n 6 World  OWID_WRL  1985                             16380243 14706334                 73506569       810942     4173602\n 7 World  OWID_WRL  1990                             17734811 16698879                 80593708       733903     4075507\n 8 World  OWID_WRL  1981                             15279447 10984462                 62459956       761247     3986858\n 9 World  OWID_WRL  1987                             17449809 15669889                 79755589       778434     4216780\n10 World  OWID_WRL  1975                             13432664 11313080                 55854975       594247     3808464\n# ℹ abbreviated name: ¹​`Industrial (large-scale commercial)`\n```\n\n\n:::\n:::\n\n\n## Making column names nicer \n\n{{< fa rocket >}} **Function:** `clean_names()`  \n{{< fa cube >}} **Package:** `janitor`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_catch %>% \n  # new function: clean_names\n  # makes the column names nicer! \n  # compare this with the column names from `colnames(global_catch)` output\n  clean_names()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 61 × 8\n   entity code      year artisanal_small_scale_commercial discards industrial_large_scale_com…¹ recreational subsistence\n   <chr>  <chr>    <dbl>                            <dbl>    <dbl>                        <dbl>        <dbl>       <dbl>\n 1 World  OWID_WRL  1950                          7526795  5874170                     14566338       268260     2677833\n 2 World  OWID_WRL  1951                          8278304  6278225                     15417937       284319     2704471\n 3 World  OWID_WRL  1952                          8272109  7230311                     16463942       293558     2728141\n 4 World  OWID_WRL  1953                          8469284  7172937                     17163789       292070     2753098\n 5 World  OWID_WRL  1954                          9226926  8012930                     18340199       304398     2895153\n 6 World  OWID_WRL  1955                          9545554  8340179                     18728089       313420     3012167\n 7 World  OWID_WRL  1956                         10303408  8692551                     19902604       319333     3058523\n 8 World  OWID_WRL  1957                         10425695  8998732                     20030089       339291     3112506\n 9 World  OWID_WRL  1958                         10172920  9255992                     20520801       353633     3187292\n10 World  OWID_WRL  1959                         10385711  9908003                     23422702       355360     3296620\n# ℹ 51 more rows\n# ℹ abbreviated name: ¹​industrial_large_scale_commercial\n```\n\n\n:::\n:::\n\n\n## Creating new columns\n\n{{< fa rocket >}} **Function:** `mutate()`  \n{{< fa cube >}} **Package:** `dplyr` (in `tidyverse`)  \n\nIn this line of code, we're calculating catch in million tons.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_catch %>% \n  clean_names() %>% # same as above\n\n  # new function: mutate\n  # create new columns to calculate catch divided by 1000000\n  mutate(artisanal_mil_tons = artisanal_small_scale_commercial/1000000,\n         industrial_mil_tons = industrial_large_scale_commercial/1000000,\n         subsistence_mil_tons = subsistence/1000000) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 61 × 11\n   entity code   year artisanal_small_scal…¹ discards industrial_large_sca…² recreational subsistence artisanal_mil_tons\n   <chr>  <chr> <dbl>                  <dbl>    <dbl>                  <dbl>        <dbl>       <dbl>              <dbl>\n 1 World  OWID…  1950                7526795  5874170               14566338       268260     2677833               7.53\n 2 World  OWID…  1951                8278304  6278225               15417937       284319     2704471               8.28\n 3 World  OWID…  1952                8272109  7230311               16463942       293558     2728141               8.27\n 4 World  OWID…  1953                8469284  7172937               17163789       292070     2753098               8.47\n 5 World  OWID…  1954                9226926  8012930               18340199       304398     2895153               9.23\n 6 World  OWID…  1955                9545554  8340179               18728089       313420     3012167               9.55\n 7 World  OWID…  1956               10303408  8692551               19902604       319333     3058523              10.3 \n 8 World  OWID…  1957               10425695  8998732               20030089       339291     3112506              10.4 \n 9 World  OWID…  1958               10172920  9255992               20520801       353633     3187292              10.2 \n10 World  OWID…  1959               10385711  9908003               23422702       355360     3296620              10.4 \n# ℹ 51 more rows\n# ℹ abbreviated names: ¹​artisanal_small_scale_commercial, ²​industrial_large_scale_commercial\n# ℹ 2 more variables: industrial_mil_tons <dbl>, subsistence_mil_tons <dbl>\n```\n\n\n:::\n:::\n\n\n\n## Selecting columns of interest\n\n{{< fa rocket >}} **Function:** `select()`  \n{{< fa cube >}} **Package:** `dplyr` (in `tidyverse`)  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_catch %>% \n  clean_names() %>% \n  mutate(artisanal_mil_tons = artisanal_small_scale_commercial/1000000,\n         industrial_mil_tons = industrial_large_scale_commercial/1000000,\n         subsistence_mil_tons = subsistence/1000000) %>% # same as above\n  \n  # new function: select\n  # select the columns you're interested in \n  select(year, artisanal_mil_tons, industrial_mil_tons, subsistence_mil_tons)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 61 × 4\n    year artisanal_mil_tons industrial_mil_tons subsistence_mil_tons\n   <dbl>              <dbl>               <dbl>                <dbl>\n 1  1950               7.53                14.6                 2.68\n 2  1951               8.28                15.4                 2.70\n 3  1952               8.27                16.5                 2.73\n 4  1953               8.47                17.2                 2.75\n 5  1954               9.23                18.3                 2.90\n 6  1955               9.55                18.7                 3.01\n 7  1956              10.3                 19.9                 3.06\n 8  1957              10.4                 20.0                 3.11\n 9  1958              10.2                 20.5                 3.19\n10  1959              10.4                 23.4                 3.30\n# ℹ 51 more rows\n```\n\n\n:::\n:::\n\n\n## Putting the data frame in long format\n\n{{< fa rocket >}} **Function:** `pivot_longer()`  \n{{< fa cube >}} **Package:** `dplyr` (in `tidyverse`)  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_catch %>% \n  clean_names() %>% \n  mutate(artisanal_mil_tons = artisanal_small_scale_commercial/1000000,\n         industrial_mil_tons = industrial_large_scale_commercial/1000000,\n         subsistence_mil_tons = subsistence/1000000) %>% \n  select(year, artisanal_mil_tons, industrial_mil_tons, subsistence_mil_tons) %>% # same as above\n  \n  # new function: pivot_longer\n  # put the data frame in long format: each row is an observation\n  # in this case, each row is a fishery with some catch (in million tons) in a given year\n  pivot_longer(cols = artisanal_mil_tons:subsistence_mil_tons)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 183 × 3\n    year name                 value\n   <dbl> <chr>                <dbl>\n 1  1950 artisanal_mil_tons    7.53\n 2  1950 industrial_mil_tons  14.6 \n 3  1950 subsistence_mil_tons  2.68\n 4  1951 artisanal_mil_tons    8.28\n 5  1951 industrial_mil_tons  15.4 \n 6  1951 subsistence_mil_tons  2.70\n 7  1952 artisanal_mil_tons    8.27\n 8  1952 industrial_mil_tons  16.5 \n 9  1952 subsistence_mil_tons  2.73\n10  1953 artisanal_mil_tons    8.47\n# ℹ 173 more rows\n```\n\n\n:::\n:::\n\n\n:::{.callout-note}\n### Compare this with the output from the \"Creating new columns\" section\nThere are still 3 columns in this data frame, but now there's a column called `name` and another called `value`. Each row is the catch in million tons for a fisher (either `artisanal`, `industrial`, or `subsistence`) in a given year.\n:::\n\n## Renaming columns\n\n{{< fa rocket >}} **Function:** `rename()`  \n{{< fa cube >}} **Package:** `dplyr` (in `tidyverse`)  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_catch %>% \n  clean_names() %>% \n  mutate(artisanal_mil_tons = artisanal_small_scale_commercial/1000000,\n         industrial_mil_tons = industrial_large_scale_commercial/1000000,\n         subsistence_mil_tons = subsistence/1000000) %>% \n  select(year, artisanal_mil_tons, industrial_mil_tons, subsistence_mil_tons) %>% \n  pivot_longer(cols = artisanal_mil_tons:subsistence_mil_tons) %>% # same as above\n  \n  # new function: rename\n  # renames columns so that they are easier to understand\n  # arguments: \"new name\" = \"old name\"\n  rename(catch_mil = value,\n         fishery_type = name) \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 183 × 3\n    year fishery_type         catch_mil\n   <dbl> <chr>                    <dbl>\n 1  1950 artisanal_mil_tons        7.53\n 2  1950 industrial_mil_tons      14.6 \n 3  1950 subsistence_mil_tons      2.68\n 4  1951 artisanal_mil_tons        8.28\n 5  1951 industrial_mil_tons      15.4 \n 6  1951 subsistence_mil_tons      2.70\n 7  1952 artisanal_mil_tons        8.27\n 8  1952 industrial_mil_tons      16.5 \n 9  1952 subsistence_mil_tons      2.73\n10  1953 artisanal_mil_tons        8.47\n# ℹ 173 more rows\n```\n\n\n:::\n:::\n\n\n## Creating a new column based on an existing column\n\n{{< fa rocket >}} **Function:** `case_when()` and `mutate()`    \n{{< fa cube >}} **Package:** `dplyr` (in `tidyverse`)  \n\nThis creates a new column with the \"full name\" for each fishery!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_catch %>% \n  clean_names() %>% \n  mutate(artisanal_mil_tons = artisanal_small_scale_commercial/1000000,\n         industrial_mil_tons = industrial_large_scale_commercial/1000000,\n         subsistence_mil_tons = subsistence/1000000) %>% \n  select(year, artisanal_mil_tons, industrial_mil_tons, subsistence_mil_tons) %>% \n  pivot_longer(cols = artisanal_mil_tons:subsistence_mil_tons) %>% \n  rename(catch_mil = value,\n         fishery_type = name) %>% # same as above\n  \n  # new function: mutate with case_when\n  # creates new column of full names for fisheries\n  mutate(fishery_full_name = case_when(\n    # if the fishery_type is artisanal, then name it \"Artisanal fishery\"\n    fishery_type == \"artisanal\" ~ \"Artisanal fishery\", \n    # if the fishery_type is industrial, then name it \"Industrial fishery\"\n    fishery_type == \"industrial\" ~ \"Industrial fishery\",\n    # if the fishery_type is subsistence, then name it \"Subsistence fishery\"\n    fishery_type == \"subsistence\" ~ \"Subsistence fishery\"\n  ))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 183 × 4\n    year fishery_type         catch_mil fishery_full_name\n   <dbl> <chr>                    <dbl> <chr>            \n 1  1950 artisanal_mil_tons        7.53 <NA>             \n 2  1950 industrial_mil_tons      14.6  <NA>             \n 3  1950 subsistence_mil_tons      2.68 <NA>             \n 4  1951 artisanal_mil_tons        8.28 <NA>             \n 5  1951 industrial_mil_tons      15.4  <NA>             \n 6  1951 subsistence_mil_tons      2.70 <NA>             \n 7  1952 artisanal_mil_tons        8.27 <NA>             \n 8  1952 industrial_mil_tons      16.5  <NA>             \n 9  1952 subsistence_mil_tons      2.73 <NA>             \n10  1953 artisanal_mil_tons        8.47 <NA>             \n# ℹ 173 more rows\n```\n\n\n:::\n:::\n\n\n## Filtering the data frame based on what's in a column\n\n{{< fa rocket >}} **Function:** `filter()`   \n{{< fa cube >}} **Package:** `dplyr` (in `tidyverse`)  \n\nThis filters the data frame to only include observations after 1980 in the `year` column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_catch %>% \n  clean_names() %>% \n  mutate(artisanal_mil_tons = artisanal_small_scale_commercial/1000000,\n         industrial_mil_tons = industrial_large_scale_commercial/1000000,\n         subsistence_mil_tons = subsistence/1000000) %>% \n  select(year, artisanal_mil_tons, industrial_mil_tons, subsistence_mil_tons) %>% \n  pivot_longer(cols = artisanal_mil_tons:subsistence_mil_tons) %>% \n  rename(catch_mil = value,\n         fishery_type = name) %>% \n  mutate(fishery_full_name = case_when(\n    # if the fishery_type is artisanal, then name it \"Artisanal fishery\"\n    fishery_type == \"artisanal\" ~ \"Artisanal fishery\", \n    # if the fishery_type is industrial, then name it \"Industrial fishery\"\n    fishery_type == \"industrial\" ~ \"Industrial fishery\",\n    # if the fishery_type is subsistence, then name it \"Subsistence fishery\"\n    fishery_type == \"subsistence\" ~ \"Subsistence fishery\"\n  )) %>% # same as above\n  \n  # new function: filter\n  # filters data frame for observations after 1980\n  filter(year > 1980)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 90 × 4\n    year fishery_type         catch_mil fishery_full_name\n   <dbl> <chr>                    <dbl> <chr>            \n 1  1981 artisanal_mil_tons       15.3  <NA>             \n 2  1981 industrial_mil_tons      62.5  <NA>             \n 3  1981 subsistence_mil_tons      3.99 <NA>             \n 4  1982 artisanal_mil_tons       15.2  <NA>             \n 5  1982 industrial_mil_tons      67.5  <NA>             \n 6  1982 subsistence_mil_tons      4.08 <NA>             \n 7  1983 artisanal_mil_tons       15.3  <NA>             \n 8  1983 industrial_mil_tons      65.7  <NA>             \n 9  1983 subsistence_mil_tons      4.20 <NA>             \n10  1984 artisanal_mil_tons       16.1  <NA>             \n# ℹ 80 more rows\n```\n\n\n:::\n:::\n\n\n\n## Putting it all together\n\nAll together to create a data frame called `global_catch_clean`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglobal_catch_clean <- global_catch %>% \n  \n  # makes the column names nicer\n  clean_names() %>% \n  \n  # divides catch by 1000000 to calculate catch in million tons\n  mutate(artisanal_mil_tons = artisanal_small_scale_commercial/1000000,\n         industrial_mil_tons = industrial_large_scale_commercial/1000000,\n         subsistence_mil_tons = subsistence/1000000) %>% \n  \n  # selecting columns\n  select(year, artisanal_mil_tons, industrial_mil_tons, subsistence_mil_tons) %>% \n  \n  # put the data frame in long format: each row is an observation\n  pivot_longer(cols = artisanal_mil_tons:subsistence_mil_tons) %>% \n  \n  # renames columns so that they are easier to understand\n  rename(catch_mil = value,\n         fishery_type = name) %>% \n  \n  # creates new column of full names for fisheries\n  mutate(fishery_full_name = case_when(\n    fishery_type == \"artisanal\" ~ \"Artisanal fishery\",\n    fishery_type == \"industrial\" ~ \"Industrial fishery\",\n    fishery_type == \"subsistence\" ~ \"Subsistence fishery\"\n  )) %>% \n  \n  # filters data frame for observations after 1980\n  filter(year > 1980)\n```\n:::\n\n\nAnd just a quick look at this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsample_n(global_catch_clean,\n         size = 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 4\n    year fishery_type         catch_mil fishery_full_name\n   <dbl> <chr>                    <dbl> <chr>            \n 1  1987 artisanal_mil_tons       17.4  <NA>             \n 2  1992 subsistence_mil_tons      4.11 <NA>             \n 3  2004 subsistence_mil_tons      3.81 <NA>             \n 4  2000 industrial_mil_tons      87.5  <NA>             \n 5  1987 industrial_mil_tons      79.8  <NA>             \n 6  2001 industrial_mil_tons      84.2  <NA>             \n 7  1999 artisanal_mil_tons       20.6  <NA>             \n 8  1986 industrial_mil_tons      78.6  <NA>             \n 9  1999 subsistence_mil_tons      4.06 <NA>             \n10  2001 subsistence_mil_tons      3.96 <NA>             \n```\n\n\n:::\n:::\n",
    "supporting": [
      "04_cleaning_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}