{
  "hash": "a19c0e392f1db96ea993f25fe4f0631b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Visualizing your data\"\n---\n\n\n![](images/352c905d-7be3-4808-9514-1fac3b0fe2fc_rw_1920.png){fig-align=\"center\"}\n\n[Artwork by [Allison Horst](https://twitter.com/allison_horst)]{style=\"color: grey; font-size: 12px\"} \n\n\n::: {.cell}\n\n:::\n\n\n\n\n## Visually exploring your data\n\nExploring your data is a _great_ way of getting to know it. There are a few basic ways you can visualize depending on what your variables are:  \n\n- If you want to know **how your variable is distributed**, you can make a **histogram.**  \n- If you want to know **how a variable differs between groups**, you can make a **boxplot** or a **jitter** plot.  \n- If you want to know **how two continuous variables relate to each other**, you can make a scatterplot.  \n\n## Tools\n\nWe'll use `ggplot()` from the `ggplot2` package in the `tidyverse` for these examples!\n\n:::{.callout-note}\n### Making your `ggplot()` objects look cohesive\n\nI like to use `theme_set()` to set a global \"look\" for my plots. This ensures that every plot in the document has the same basic aesthetic changes, while still leaving room for customization in each plot.  \n\nIn a code chunk at the beginning of your document, you can use `theme_set()` to apply `theme()` elements to all the plots you make:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntheme_set(\n theme_bw() + # cleaner theme\n theme(panel.grid = element_blank()) # taking the gridlines out\n)\n```\n:::\n\n\n:::\n\n## Exploring distributions using histograms\n\nFor this example, we'll create a histogram for the artisanal fishery.  \n\n{{< fa rocket >}} **Function:** `geom_histogram()`  \n\n\n::: {.cell}\n\n```{.r .cell-code}\nartisanal <- global_catch_clean %>% \n  # filtering for artisanal fishery only\n  filter(fishery_type == \"artisanal\")\n\n# global ggplot call\nggplot(data = artisanal, # the data frame\n       aes(x = catch_mil)) + # the x-axis\n  \n  # creating a histogram\n  geom_histogram(bins = 7, # number of columns/bins\n                 alpha = 0.7, # making the bars a little transparent\n                 fill = \"#004c4c\", # filling the bars \n                 color = \"#004c4c\") + # outline of the bars\n  \n  # extra stuff to make your plot look nicer\n  scale_y_continuous(expand = c(0, 0), # gets rid of the space below the bars\n                     limits = c(0, 10)) + # sets the limits of the y-axis \n  # labelling the x- and y-axes\n  labs(x = \"Catch (million tons)\",\n       y = \"Count\")\n```\n\n::: {.cell-output-display}\n![](05_visualizing_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Exploring differences between groups using jitter plots\n\n{{< fa rocket >}} **Function:** `geom_jitter()`  \n\n:::{.callout-note}\n### How jitters work\n`geom_jitter()` randomly shakes points left and right and up and down to make them easier to see. This is fine, but sometimes weird to have a jitter applied up and down when the y-axis actually represents a value that you're interested in.  \n\nBelow are two ways of creating a jitter plot: the simple way (with no customization for where the jittered points go), and the more custom way (where you can control the position of the jittered points relative to the x- and y-axes).\n:::\n\nSimple jitter (no customization):\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# simple way to create a jitter plot\nggplot(data = global_catch_clean, # data frame\n       aes(x = fishery_full_name, # x-axis\n           y = catch_mil)) + # y-axis\n  geom_jitter()\n```\n\n::: {.cell-output-display}\n![](05_visualizing_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nCustom jitter with `position = position_jitter()`: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# a way with a little more control over the jitter\nggplot(data = global_catch_clean, # data frame\n       aes(x = fishery_full_name, # x-axis\n           y = catch_mil, # y-axis\n           color = fishery_full_name)) + # coloring points by fishery - this is required for the scale_color_manual code to work!\n  geom_jitter(position = position_jitter(\n    width = 0.2, # shakes the points around left and right \n    height = 0, # doesn't shake the points up and down\n    seed = 1)) + # makes sure the \"random\" arrangement stays the same\n \n  # extra stuff to make the plot look nicer\n  # controlling the color of the points\n  scale_color_manual(values = c(\"Artisanal fishery\" = \"#008080\",\n                                \"Industrial fishery\" = \"#004c4c\",\n                                \"Subsistence fishery\" = \"#b2d8d8\")) +\n  # labeling the y-axis\n  labs(y = \"Catch (million tons)\") +\n  theme(legend.position = \"none\", # taking out the legend\n        axis.title.x = element_blank()) # taking out the x-axis title (redundant)\n```\n\n::: {.cell-output-display}\n![](05_visualizing_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n## Exploring differences between groups using boxplots\n\n{{< fa rocket >}} **Function:** `geom_boxplot()`  \n\nA boxplot shows the _median_ of a group, the interquartile range, and 1.5x the interquartile range.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = global_catch_clean, # data frame\n       aes(x = fishery_full_name, # x-axis\n           y = catch_mil, # y-axis\n           fill = fishery_full_name)) + # filling the boxplot by fishery, again needed for the scale_fill_manual code to work!\n  geom_boxplot() +\n\n  # extra stuff to make the plot look nicer\n  # controlling the fill of the boxplots\n  scale_fill_manual(values = c(\"Artisanal fishery\" = \"#008080\",\n                                \"Industrial fishery\" = \"#004c4c\",\n                                \"Subsistence fishery\" = \"#b2d8d8\")) +\n  # labeling the y-axis\n  labs(y = \"Catch (million tons)\") +\n  theme(legend.position = \"none\", # taking out the legend\n        axis.title.x = element_blank()) # taking out the x-axis title (redundant)\n```\n\n::: {.cell-output-display}\n![](05_visualizing_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n## Exploring relationships between variables using scaterplots\n\n{{< fa rocket >}} **Function:** `geom_point()`  \n\nIn this example, the x-axis is year and the y-axis is catch (million tons), but you can explore any continuous variables this way!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = global_catch_clean, # data frame\n       aes(x = year, # x-axis\n           y = catch_mil, # y-axis\n           color = fishery_full_name)) + # coloring by fishery \n  geom_point() +\n\n  # extra stuff to make the plot look nicer\n  # controlling the color of the points\n  scale_color_manual(values = c(\"Artisanal fishery\" = \"#008080\",\n                                \"Industrial fishery\" = \"#004c4c\",\n                                \"Subsistence fishery\" = \"#b2d8d8\")) +\n  # labeling the y-axis and the legend\n  labs(x = \"Year\",\n       y = \"Catch (million tons)\",\n       color = \"Fishery type\") \n```\n\n::: {.cell-output-display}\n![](05_visualizing_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "05_visualizing_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}