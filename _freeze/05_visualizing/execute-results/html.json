{
  "hash": "b4b99b91b56ebd306a678e69337fdb31",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Visualizing\"\n---\n\n\n## Visualize it\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(janitor)\nlibrary(here)\n\nglobal_catch <- read_csv(here(\"data\", # data is in the \"data\" folder in this repository\n                         \"global-fishery-catch-by-sector.csv\")) # file name\n\nglobal_catch_clean <- global_catch %>% \n  \n  # makes the column names nicer\n  clean_names() %>% \n  \n  # divides catch by 1000000 to calculate catch in million tons\n  mutate(artisanal = artisanal_small_scale_commercial/1000000,\n         industrial = industrial_large_scale_commercial/1000000) %>% \n  \n  # selecting columns\n  select(year, artisanal, industrial) %>% \n  \n  # put the data frame in long format: each row is an observation\n  pivot_longer(cols = artisanal:industrial) %>% \n  \n  # renames columns so that they are easier to understand\n  rename(catch_mil = value,\n         fishery_type = name) %>% \n  \n  # creates new column of full names for fisheries\n  mutate(fishery_full_name = case_when(\n    fishery_type == \"artisanal\" ~ \"Artisanal fishery\",\n    fishery_type == \"industrial\" ~ \"Industrial fishery\"\n  )) %>% \n  \n  # filters data frame for observations after 1980\n  filter(year > 1980)\n```\n:::\n\n\nHistogram:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# for this example, only going to use the artisanal fishery\nartisanal <- global_catch_clean %>% \n  filter(fishery_type == \"artisanal\")\n\n# global ggplot call\nggplot(data = artisanal, # the data frame\n       aes(x = catch_mil)) + # the x-axis\n  \n  # creating a histogram\n  geom_histogram(bins = 7, # number of columns/bins\n                 fill = \"darkgreen\", # filling the bars in green\n                 color = \"black\") + # outline of the bars: black\n  \n  # extra stuff to make your plot look nicer\n  scale_y_continuous(expand = c(0, 0), # gets rid of the space below the bars\n                     limits = c(0, 9)) + # sets the limits of the y-axis\n  theme_bw() # clears out the grey background\n```\n\n::: {.cell-output-display}\n![](05_visualizing_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# simple way to create a jitter plot\nggplot(data = global_catch_clean, # data frame\n       aes(x = fishery_full_name, # x-axis\n           y = catch_mil)) + # y-axis\n  geom_jitter()\n```\n\n::: {.cell-output-display}\n![](05_visualizing_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# a way with a little more control over the jitter\nggplot(data = global_catch_clean, # data frame\n       aes(x = fishery_full_name, # x-axis\n           y = catch_mil)) + # y-axis\n  geom_jitter(position = position_jitter(\n    width = 0.2, # shakes the points around left and right \n    height = 0, # doesn't shake the points up and down\n    seed = 1 # makes sure the \"random\" arrangement stays the same\n  ))\n```\n\n::: {.cell-output-display}\n![](05_visualizing_files/figure-html/unnamed-chunk-3-2.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = global_catch_clean, # data frame\n       aes(x = year, # x-axis\n           y = catch_mil,\n           color = fishery_type)) + # y-axis\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](05_visualizing_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = global_catch_clean, # data frame\n       aes(x = fishery_full_name, # x-axis\n           y = catch_mil)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](05_visualizing_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "05_visualizing_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}