[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "EEMB Data Management Workshop",
    "section": "",
    "text": "Preface\n\nArtwork by Allison Horst\nWhat: This is the accompanying code guide for all the functions we talked about in our workshop. Hopefully you find this helpful!\nFor whom: anyone who wants to get started with data processing in R!\nWhen: Wednesday June 5 2024, 9 - 11 AM\nOrganizers: Piper Lovegreen and An Bui\nPanelists: Zoe Zilz, Caitlin Nordheim-Maestas, An Bui",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "01_packages.html",
    "href": "01_packages.html",
    "title": "Packages we discussed",
    "section": "",
    "text": "library(tidyverse)\nImage source: University of Cape Town Faculty of Science: Statistical Sciences\nlibrary(tidyverse)\nA package of packages:\nPackage info",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Packages we discussed</span>"
    ]
  },
  {
    "objectID": "01_packages.html#librarytidyverse",
    "href": "01_packages.html#librarytidyverse",
    "title": "Packages we discussed",
    "section": "",
    "text": "dplyr\n\nforcats\n\nggplot2\n\nlubridate\n\npurrr\n\nreadr\n\nstringr\n\ntibble\n\ntidyr",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Packages we discussed</span>"
    ]
  },
  {
    "objectID": "01_packages.html#libraryhere",
    "href": "01_packages.html#libraryhere",
    "title": "Packages we discussed",
    "section": "library(here)",
    "text": "library(here)\n\n\n\n\n\nArtwork by Allison Horst\n\nlibrary(here)\n\nOrganizes your file paths!\n Package info",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Packages we discussed</span>"
    ]
  },
  {
    "objectID": "01_packages.html#libraryrepmis",
    "href": "01_packages.html#libraryrepmis",
    "title": "Packages we discussed",
    "section": "library(repmis)",
    "text": "library(repmis)\n\nlibrary(repmis)\n\nReads in data from Dropbox!\n Package info",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Packages we discussed</span>"
    ]
  },
  {
    "objectID": "01_packages.html#libraryjanitor",
    "href": "01_packages.html#libraryjanitor",
    "title": "Packages we discussed",
    "section": "library(janitor)",
    "text": "library(janitor)\n\n\n\n\n\nArtwork by Allison Horst\n\nlibrary(janitor)\n\nGeneral cleaning functions:\n Package info",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Packages we discussed</span>"
    ]
  },
  {
    "objectID": "01_packages.html#librarygooglesheets4",
    "href": "01_packages.html#librarygooglesheets4",
    "title": "Packages we discussed",
    "section": "library(googlesheets4)",
    "text": "library(googlesheets4)\n\n\n\n\n\nReads data in from Google Sheets!\n\nlibrary(googlesheets4)\n\n Package info",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Packages we discussed</span>"
    ]
  },
  {
    "objectID": "01_packages.html#libraryskimr",
    "href": "01_packages.html#libraryskimr",
    "title": "Packages we discussed",
    "section": "library(skimr)",
    "text": "library(skimr)\nGives you a quick idea of what’s going on with your data!\n\nlibrary(skimr)\n\n Package info",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Packages we discussed</span>"
    ]
  },
  {
    "objectID": "02_reading-your-data.html",
    "href": "02_reading-your-data.html",
    "title": "Reading your data into RStudio",
    "section": "",
    "text": "Ways to read in data\nThere are lots of ways that you can read your data into RStudio, depending on the format of your data (.csv, .xlsx, etc.) and where it is (for example, if you have a folder called data in which your data lives, or if your data is in the same folder as your code).\nThese are a few examples of different ways of reading in your data, but experiment with different set ups to see what works for you!",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reading your data into RStudio</span>"
    ]
  },
  {
    "objectID": "02_reading-your-data.html#if-your-file-is-a-.csv",
    "href": "02_reading-your-data.html#if-your-file-is-a-.csv",
    "title": "Reading your data into RStudio",
    "section": "If your file is a .csv",
    "text": "If your file is a .csv\nIf your file is in the root directory (i.e. the same folder as the .Rproj file)\n\ntest_data &lt;- read_csv(\"data.csv\") # just the file name",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reading your data into RStudio</span>"
    ]
  },
  {
    "objectID": "02_reading-your-data.html#using-the-here-package",
    "href": "02_reading-your-data.html#using-the-here-package",
    "title": "Reading your data into RStudio",
    "section": "Using the here package",
    "text": "Using the here package\nhere allows you to specify file paths without using relative file paths (like slashes). This makes it easier for people on different operating systems to use your code.\nIn this example, the data.csv is in a folder called data.\nread_csv() wraps around the here(\"data\", \"data.csv\") function to read in the data.csv file in the data folder.\n\ntest_data &lt;- read_csv(here(\"data\", # folder name: data\n                           \"data.csv\")) # file name: data.csv",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reading your data into RStudio</span>"
    ]
  },
  {
    "objectID": "02_reading-your-data.html#if-your-file-is-a-.xlsx",
    "href": "02_reading-your-data.html#if-your-file-is-a-.xlsx",
    "title": "Reading your data into RStudio",
    "section": "If your file is a .xlsx",
    "text": "If your file is a .xlsx\n\ndata_from_excel &lt;- read_xlsx(\"data.xlsx\", # file name\n                             sheet = \"This is the sheet name\", # if there are multiple sheets in the .xlsx file\n                             na = c(\"NA\")) # explicitly name what the NAs are in the sheet - not necessary, but sometimes nice!",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reading your data into RStudio</span>"
    ]
  },
  {
    "objectID": "02_reading-your-data.html#if-your-file-is-on-dropbox",
    "href": "02_reading-your-data.html#if-your-file-is-on-dropbox",
    "title": "Reading your data into RStudio",
    "section": "If your file is on Dropbox:",
    "text": "If your file is on Dropbox:\n\ndata_from_dropbox &lt;- source_data(\"share link goes here\") # paste the share link, change dl=0 to dl=1 at the end (don't know why but it works!)\n\nDirections",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reading your data into RStudio</span>"
    ]
  },
  {
    "objectID": "02_reading-your-data.html#if-your-file-is-on-google-sheets",
    "href": "02_reading-your-data.html#if-your-file-is-on-google-sheets",
    "title": "Reading your data into RStudio",
    "section": "If your file is on Google Sheets:",
    "text": "If your file is on Google Sheets:\n\n# get the sheet id from the url\nsheet_id &lt;- \"insert sheet id here\"\n\ndata_from_google_sheets &lt;- read_sheet(sheet_id, # the sheet id that you stored above\n                                      sheet = \"insert sheet name here\") # if you have multiple sheets, you can select the sheet you want\n\n\n\n\n\n\n\nAuthentication with googlesheets4\n\n\n\nNote that when you run this, googlesheets4 will ask for authentication. Critically, this only works if you are there to interact with the package (i.e. actually authenticate yourself); therefore, this is not a good option if you are rendering/knitting your code. One solution is to make the sheet public (which isn’t always ideal). Another solution is to have a separate script in your project that reads stuff in from Google Sheets and creates .csv files on your computer, and use the .csv files downloaded from Google Sheets in your down stream analysis.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Reading your data into RStudio</span>"
    ]
  },
  {
    "objectID": "03_looking-at-your-data.html",
    "href": "03_looking-at-your-data.html",
    "title": "Looking at your data",
    "section": "",
    "text": "Data source\nIn this example, we’re going to use global fishery catch data from Tidy Tuesday 2021-10-12.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Looking at your data</span>"
    ]
  },
  {
    "objectID": "03_looking-at-your-data.html#set-up",
    "href": "03_looking-at-your-data.html#set-up",
    "title": "Looking at your data",
    "section": "Set up",
    "text": "Set up\nFirst, we’ll read in the packages we need:\n\nlibrary(tidyverse) # general use\nlibrary(here) # file path organization\nlibrary(skimr) # quick summary stats \n\nThen, we’ll read in the data:\n\n# creating a new object called `global_catch`\nglobal_catch &lt;- read_csv(here(\"data\", # data is in the \"data\" folder in this repository\n                              \"global-fishery-catch-by-sector.csv\")) # file name",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Looking at your data</span>"
    ]
  },
  {
    "objectID": "03_looking-at-your-data.html#quick-look-at-the-data-using-glimpse-and-str",
    "href": "03_looking-at-your-data.html#quick-look-at-the-data-using-glimpse-and-str",
    "title": "Looking at your data",
    "section": "Quick look at the data using glimpse() and str()",
    "text": "Quick look at the data using glimpse() and str()\nglimpse() and str() both give a sense of the kinds of variables (numeric, factor, etc.) that are in each column, along with the contents of the columns and the column names.\nglimpse() gives similar information as str(): use either (or both!).\n\nglimpse(global_catch)\n\nRows: 61\nColumns: 8\n$ Entity                                &lt;chr&gt; \"World\", \"World\", \"World\", \"Worl…\n$ Code                                  &lt;chr&gt; \"OWID_WRL\", \"OWID_WRL\", \"OWID_WR…\n$ Year                                  &lt;dbl&gt; 1950, 1951, 1952, 1953, 1954, 19…\n$ `Artisanal (small-scale commercial)`  &lt;dbl&gt; 7526795, 8278304, 8272109, 84692…\n$ Discards                              &lt;dbl&gt; 5874170, 6278225, 7230311, 71729…\n$ `Industrial (large-scale commercial)` &lt;dbl&gt; 14566338, 15417937, 16463942, 17…\n$ Recreational                          &lt;dbl&gt; 268260, 284319, 293558, 292070, …\n$ Subsistence                           &lt;dbl&gt; 2677833, 2704471, 2728141, 27530…\n\n\n\nstr(global_catch)\n\nspc_tbl_ [61 × 8] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ Entity                             : chr [1:61] \"World\" \"World\" \"World\" \"World\" ...\n $ Code                               : chr [1:61] \"OWID_WRL\" \"OWID_WRL\" \"OWID_WRL\" \"OWID_WRL\" ...\n $ Year                               : num [1:61] 1950 1951 1952 1953 1954 ...\n $ Artisanal (small-scale commercial) : num [1:61] 7526795 8278304 8272109 8469284 9226926 ...\n $ Discards                           : num [1:61] 5874170 6278225 7230311 7172937 8012930 ...\n $ Industrial (large-scale commercial): num [1:61] 14566338 15417937 16463942 17163789 18340199 ...\n $ Recreational                       : num [1:61] 268260 284319 293558 292070 304398 ...\n $ Subsistence                        : num [1:61] 2677833 2704471 2728141 2753098 2895153 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   Entity = col_character(),\n  ..   Code = col_character(),\n  ..   Year = col_double(),\n  ..   `Artisanal (small-scale commercial)` = col_double(),\n  ..   Discards = col_double(),\n  ..   `Industrial (large-scale commercial)` = col_double(),\n  ..   Recreational = col_double(),\n  ..   Subsistence = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt;",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Looking at your data</span>"
    ]
  },
  {
    "objectID": "03_looking-at-your-data.html#getting-the-column-names-using-colnames",
    "href": "03_looking-at-your-data.html#getting-the-column-names-using-colnames",
    "title": "Looking at your data",
    "section": "Getting the column names using colnames()",
    "text": "Getting the column names using colnames()\nYou’ll be using the column names of your data frame a lot - you can use colnames() to figure out what the names actually are.\n\ncolnames(global_catch)\n\n[1] \"Entity\"                              \"Code\"                               \n[3] \"Year\"                                \"Artisanal (small-scale commercial)\" \n[5] \"Discards\"                            \"Industrial (large-scale commercial)\"\n[7] \"Recreational\"                        \"Subsistence\"",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Looking at your data</span>"
    ]
  },
  {
    "objectID": "03_looking-at-your-data.html#a-random-sample-of-rows-using-sample_n",
    "href": "03_looking-at-your-data.html#a-random-sample-of-rows-using-sample_n",
    "title": "Looking at your data",
    "section": "A random sample of rows using sample_n()",
    "text": "A random sample of rows using sample_n()\nYou can get a quick look at a random sample of rows from the data frame using sample_n() to get a sense of what each row might look like.\n\nsample_n(global_catch, # the data frame\n         size = 10) # the number of rows to view\n\n# A tibble: 10 × 8\n   Entity Code      Year Artisanal (small-scal…¹ Discards Industrial (large-sc…²\n   &lt;chr&gt;  &lt;chr&gt;    &lt;dbl&gt;                   &lt;dbl&gt;    &lt;dbl&gt;                  &lt;dbl&gt;\n 1 World  OWID_WRL  1986                16227297 15091641               78606140\n 2 World  OWID_WRL  1972                12753562 12357980               51789011\n 3 World  OWID_WRL  1969                12211407 12761884               52626777\n 4 World  OWID_WRL  1987                17449809 15669889               79755589\n 5 World  OWID_WRL  1992                18417117 15717869               81793283\n 6 World  OWID_WRL  1999                20588769 12426124               84833508\n 7 World  OWID_WRL  1980                14688464 10500231               60489781\n 8 World  OWID_WRL  1976                13761132 11095856               59084000\n 9 World  OWID_WRL  1975                13432664 11313080               55854975\n10 World  OWID_WRL  1998                20332081 13154260               79574228\n# ℹ abbreviated names: ¹​`Artisanal (small-scale commercial)`,\n#   ²​`Industrial (large-scale commercial)`\n# ℹ 2 more variables: Recreational &lt;dbl&gt;, Subsistence &lt;dbl&gt;",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Looking at your data</span>"
    ]
  },
  {
    "objectID": "03_looking-at-your-data.html#summary-stats-and-more-with-skim",
    "href": "03_looking-at-your-data.html#summary-stats-and-more-with-skim",
    "title": "Looking at your data",
    "section": "Summary stats and more with skim()",
    "text": "Summary stats and more with skim()\nThe skim() function in the skimr package gives you a bunch of summary information about the data in each column. Note that this is a lot of information, but if you want some broad brush strokes level summary (e.g. what’s the mean in each column?), then skim() might be a good option!\n\nskim(global_catch)\n\n\nData summary\n\n\nName\nglobal_catch\n\n\nNumber of rows\n61\n\n\nNumber of columns\n8\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n6\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nEntity\n0\n1\n5\n5\n0\n1\n0\n\n\nCode\n0\n1\n8\n8\n0\n1\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nYear\n0\n1\n1980.0\n17.75\n1950\n1965\n1980\n1995\n2010\n▇▇▇▇▇\n\n\nArtisanal (small-scale commercial)\n0\n1\n15180177.2\n4255916.20\n7526795\n11653978\n14688464\n19665232\n21828623\n▅▇▆▅▇\n\n\nDiscards\n0\n1\n11834829.3\n2601005.59\n5874170\n10014530\n11712961\n13595692\n16962727\n▂▃▇▆▃\n\n\nIndustrial (large-scale commercial)\n0\n1\n59491189.3\n24241541.41\n14566338\n41475194\n62459956\n80593708\n90068159\n▃▂▃▃▇\n\n\nRecreational\n0\n1\n609926.8\n194120.54\n268260\n405857\n731511\n769491\n849021\n▃▂▁▁▇\n\n\nSubsistence\n0\n1\n3777210.0\n416715.61\n2677833\n3630156\n3911536\n4072844\n4226487\n▂▂▁▆▇",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Looking at your data</span>"
    ]
  },
  {
    "objectID": "04_cleaning.html",
    "href": "04_cleaning.html",
    "title": "Cleaning",
    "section": "",
    "text": "Cleaning up\nWe’re going to keep using the data from the “Looking at your data” section, but now we’re going to clean it. The big functions we’ll use are:",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Cleaning</span>"
    ]
  },
  {
    "objectID": "04_cleaning.html#cleaning-up",
    "href": "04_cleaning.html#cleaning-up",
    "title": "Cleaning",
    "section": "",
    "text": "clean_names(): cleans up column names\n\nmutate(): creates new columns, changes columns (very powerful when used with case_when())\n\nselect(): selects columns from a data frame\npivot_longer(): puts the data frame in “long format” (each row is an observation)\n\nrename(): renames columns\nfilter(): filters data frame",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Cleaning</span>"
    ]
  },
  {
    "objectID": "04_cleaning.html#the-original-data-frame",
    "href": "04_cleaning.html#the-original-data-frame",
    "title": "Cleaning",
    "section": "The original data frame",
    "text": "The original data frame\nJust to remind ourselves, this is what the original data frame looks like:\n\nsample_n(\n  global_catch,\n  size = 10\n)\n\n# A tibble: 10 × 8\n   Entity Code      Year `Artisanal (small-scale commercial)` Discards `Industrial (large-scale commercial)` Recreational Subsistence\n   &lt;chr&gt;  &lt;chr&gt;    &lt;dbl&gt;                                &lt;dbl&gt;    &lt;dbl&gt;                                 &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt;\n 1 World  OWID_WRL  1968                             12303383 13871018                              55617156       460158     3916270\n 2 World  OWID_WRL  2001                             20046446 11506452                              84201719       769491     3955601\n 3 World  OWID_WRL  1955                              9545554  8340179                              18728089       313420     3012167\n 4 World  OWID_WRL  1963                             11005246 12332187                              36093501       392172     3826997\n 5 World  OWID_WRL  1952                              8272109  7230311                              16463942       293558     2728141\n 6 World  OWID_WRL  1960                             10703245 10896146                              25853941       360842     3479410\n 7 World  OWID_WRL  1983                             15300068 12388473                              65689361       849021     4200135\n 8 World  OWID_WRL  1973                             13688372 12031176                              51308375       548785     3957258\n 9 World  OWID_WRL  1974                             13309012 11416434                              56720856       583018     3866687\n10 World  OWID_WRL  1997                             20401848 14321828                              88205198       774972     4044958",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Cleaning</span>"
    ]
  },
  {
    "objectID": "04_cleaning.html#making-column-names-nicer",
    "href": "04_cleaning.html#making-column-names-nicer",
    "title": "Cleaning",
    "section": "Making column names nicer",
    "text": "Making column names nicer\n Function: clean_names()\n Package: janitor\n\nglobal_catch %&gt;% \n  # new function: clean_names\n  # makes the column names nicer! \n  # compare this with the column names from `colnames(global_catch)` output\n  clean_names()\n\n# A tibble: 61 × 8\n   entity code      year artisanal_small_scale_commercial discards industrial_large_scale_commercial recreational subsistence\n   &lt;chr&gt;  &lt;chr&gt;    &lt;dbl&gt;                            &lt;dbl&gt;    &lt;dbl&gt;                             &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt;\n 1 World  OWID_WRL  1950                          7526795  5874170                          14566338       268260     2677833\n 2 World  OWID_WRL  1951                          8278304  6278225                          15417937       284319     2704471\n 3 World  OWID_WRL  1952                          8272109  7230311                          16463942       293558     2728141\n 4 World  OWID_WRL  1953                          8469284  7172937                          17163789       292070     2753098\n 5 World  OWID_WRL  1954                          9226926  8012930                          18340199       304398     2895153\n 6 World  OWID_WRL  1955                          9545554  8340179                          18728089       313420     3012167\n 7 World  OWID_WRL  1956                         10303408  8692551                          19902604       319333     3058523\n 8 World  OWID_WRL  1957                         10425695  8998732                          20030089       339291     3112506\n 9 World  OWID_WRL  1958                         10172920  9255992                          20520801       353633     3187292\n10 World  OWID_WRL  1959                         10385711  9908003                          23422702       355360     3296620\n# ℹ 51 more rows",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Cleaning</span>"
    ]
  },
  {
    "objectID": "04_cleaning.html#creating-new-columns",
    "href": "04_cleaning.html#creating-new-columns",
    "title": "Cleaning",
    "section": "Creating new columns",
    "text": "Creating new columns\n Function: mutate()\n Package: dplyr (in tidyverse)\nIn this line of code, we’re calculating catch in million tons.\n\nglobal_catch %&gt;% \n  clean_names() %&gt;% # same as above\n\n  # new function: mutate\n  # create new columns to calculate catch divided by 1000000\n  mutate(artisanal_mil_tons = artisanal_small_scale_commercial/1000000,\n         industrial_mil_tons = industrial_large_scale_commercial/1000000,\n         subsistence_mil_tons = subsistence/1000000) \n\n# A tibble: 61 × 11\n   entity code      year artisanal_small_scale_commercial discards industrial_large_scale_commercial recreational subsistence artisanal_mil_tons industrial_mil_tons subsistence_mil_tons\n   &lt;chr&gt;  &lt;chr&gt;    &lt;dbl&gt;                            &lt;dbl&gt;    &lt;dbl&gt;                             &lt;dbl&gt;        &lt;dbl&gt;       &lt;dbl&gt;              &lt;dbl&gt;               &lt;dbl&gt;                &lt;dbl&gt;\n 1 World  OWID_WRL  1950                          7526795  5874170                          14566338       268260     2677833               7.53                14.6                 2.68\n 2 World  OWID_WRL  1951                          8278304  6278225                          15417937       284319     2704471               8.28                15.4                 2.70\n 3 World  OWID_WRL  1952                          8272109  7230311                          16463942       293558     2728141               8.27                16.5                 2.73\n 4 World  OWID_WRL  1953                          8469284  7172937                          17163789       292070     2753098               8.47                17.2                 2.75\n 5 World  OWID_WRL  1954                          9226926  8012930                          18340199       304398     2895153               9.23                18.3                 2.90\n 6 World  OWID_WRL  1955                          9545554  8340179                          18728089       313420     3012167               9.55                18.7                 3.01\n 7 World  OWID_WRL  1956                         10303408  8692551                          19902604       319333     3058523              10.3                 19.9                 3.06\n 8 World  OWID_WRL  1957                         10425695  8998732                          20030089       339291     3112506              10.4                 20.0                 3.11\n 9 World  OWID_WRL  1958                         10172920  9255992                          20520801       353633     3187292              10.2                 20.5                 3.19\n10 World  OWID_WRL  1959                         10385711  9908003                          23422702       355360     3296620              10.4                 23.4                 3.30\n# ℹ 51 more rows",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Cleaning</span>"
    ]
  },
  {
    "objectID": "04_cleaning.html#selecting-columns-of-interest",
    "href": "04_cleaning.html#selecting-columns-of-interest",
    "title": "Cleaning",
    "section": "Selecting columns of interest",
    "text": "Selecting columns of interest\n Function: select()\n Package: dplyr (in tidyverse)\n\nglobal_catch %&gt;% \n  clean_names() %&gt;% \n  mutate(artisanal_mil_tons = artisanal_small_scale_commercial/1000000,\n         industrial_mil_tons = industrial_large_scale_commercial/1000000,\n         subsistence_mil_tons = subsistence/1000000) %&gt;% # same as above\n  \n  # new function: select\n  # select the columns you're interested in \n  select(year, artisanal_mil_tons, industrial_mil_tons, subsistence_mil_tons)\n\n# A tibble: 61 × 4\n    year artisanal_mil_tons industrial_mil_tons subsistence_mil_tons\n   &lt;dbl&gt;              &lt;dbl&gt;               &lt;dbl&gt;                &lt;dbl&gt;\n 1  1950               7.53                14.6                 2.68\n 2  1951               8.28                15.4                 2.70\n 3  1952               8.27                16.5                 2.73\n 4  1953               8.47                17.2                 2.75\n 5  1954               9.23                18.3                 2.90\n 6  1955               9.55                18.7                 3.01\n 7  1956              10.3                 19.9                 3.06\n 8  1957              10.4                 20.0                 3.11\n 9  1958              10.2                 20.5                 3.19\n10  1959              10.4                 23.4                 3.30\n# ℹ 51 more rows",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Cleaning</span>"
    ]
  },
  {
    "objectID": "04_cleaning.html#putting-the-data-frame-in-long-format",
    "href": "04_cleaning.html#putting-the-data-frame-in-long-format",
    "title": "Cleaning",
    "section": "Putting the data frame in long format",
    "text": "Putting the data frame in long format\n Function: pivot_longer()\n Package: dplyr (in tidyverse)\n\nglobal_catch %&gt;% \n  clean_names() %&gt;% \n  mutate(artisanal_mil_tons = artisanal_small_scale_commercial/1000000,\n         industrial_mil_tons = industrial_large_scale_commercial/1000000,\n         subsistence_mil_tons = subsistence/1000000) %&gt;% \n  select(year, artisanal_mil_tons, industrial_mil_tons, subsistence_mil_tons) %&gt;% # same as above\n  \n  # new function: pivot_longer\n  # put the data frame in long format: each row is an observation\n  # in this case, each row is a fishery with some catch (in million tons) in a given year\n  pivot_longer(cols = artisanal_mil_tons:subsistence_mil_tons)\n\n# A tibble: 183 × 3\n    year name                 value\n   &lt;dbl&gt; &lt;chr&gt;                &lt;dbl&gt;\n 1  1950 artisanal_mil_tons    7.53\n 2  1950 industrial_mil_tons  14.6 \n 3  1950 subsistence_mil_tons  2.68\n 4  1951 artisanal_mil_tons    8.28\n 5  1951 industrial_mil_tons  15.4 \n 6  1951 subsistence_mil_tons  2.70\n 7  1952 artisanal_mil_tons    8.27\n 8  1952 industrial_mil_tons  16.5 \n 9  1952 subsistence_mil_tons  2.73\n10  1953 artisanal_mil_tons    8.47\n# ℹ 173 more rows\n\n\n\n\n\n\n\n\nCompare this with the output from the “Creating new columns” section\n\n\n\nThere are still 3 columns in this data frame, but now there’s a column called name and another called value. Each row is the catch in million tons for a fisher (either artisanal, industrial, or subsistence) in a given year.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Cleaning</span>"
    ]
  },
  {
    "objectID": "04_cleaning.html#renaming-columns",
    "href": "04_cleaning.html#renaming-columns",
    "title": "Cleaning",
    "section": "Renaming columns",
    "text": "Renaming columns\n Function: rename()\n Package: dplyr (in tidyverse)\n\nglobal_catch %&gt;% \n  clean_names() %&gt;% \n  mutate(artisanal_mil_tons = artisanal_small_scale_commercial/1000000,\n         industrial_mil_tons = industrial_large_scale_commercial/1000000,\n         subsistence_mil_tons = subsistence/1000000) %&gt;% \n  select(year, artisanal_mil_tons, industrial_mil_tons, subsistence_mil_tons) %&gt;% \n  pivot_longer(cols = artisanal_mil_tons:subsistence_mil_tons) %&gt;% # same as above\n  \n  # new function: rename\n  # renames columns so that they are easier to understand\n  # arguments: \"new name\" = \"old name\"\n  rename(catch_mil = value,\n         fishery_type = name) \n\n# A tibble: 183 × 3\n    year fishery_type         catch_mil\n   &lt;dbl&gt; &lt;chr&gt;                    &lt;dbl&gt;\n 1  1950 artisanal_mil_tons        7.53\n 2  1950 industrial_mil_tons      14.6 \n 3  1950 subsistence_mil_tons      2.68\n 4  1951 artisanal_mil_tons        8.28\n 5  1951 industrial_mil_tons      15.4 \n 6  1951 subsistence_mil_tons      2.70\n 7  1952 artisanal_mil_tons        8.27\n 8  1952 industrial_mil_tons      16.5 \n 9  1952 subsistence_mil_tons      2.73\n10  1953 artisanal_mil_tons        8.47\n# ℹ 173 more rows",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Cleaning</span>"
    ]
  },
  {
    "objectID": "04_cleaning.html#creating-a-new-column-based-on-an-existing-column",
    "href": "04_cleaning.html#creating-a-new-column-based-on-an-existing-column",
    "title": "Cleaning",
    "section": "Creating a new column based on an existing column",
    "text": "Creating a new column based on an existing column\n Function: case_when() and mutate()\n Package: dplyr (in tidyverse)\nThis creates a new column with the “full name” for each fishery!\n\nglobal_catch %&gt;% \n  clean_names() %&gt;% \n  mutate(artisanal_mil_tons = artisanal_small_scale_commercial/1000000,\n         industrial_mil_tons = industrial_large_scale_commercial/1000000,\n         subsistence_mil_tons = subsistence/1000000) %&gt;% \n  select(year, artisanal_mil_tons, industrial_mil_tons, subsistence_mil_tons) %&gt;% \n  pivot_longer(cols = artisanal_mil_tons:subsistence_mil_tons) %&gt;% \n  rename(catch_mil = value,\n         fishery_type = name) %&gt;% # same as above\n  \n  # new function: mutate with case_when\n  # creates new column of full names for fisheries\n  mutate(fishery_full_name = case_when(\n    # if the fishery_type is artisanal, then name it \"Artisanal fishery\"\n    fishery_type == \"artisanal_mil_tons\" ~ \"Artisanal fishery\", \n    # if the fishery_type is industrial, then name it \"Industrial fishery\"\n    fishery_type == \"industrial_mil_tons\" ~ \"Industrial fishery\",\n    # if the fishery_type is subsistence, then name it \"Subsistence fishery\"\n    fishery_type == \"subsistence_mil_tons\" ~ \"Subsistence fishery\"\n  ))\n\n# A tibble: 183 × 4\n    year fishery_type         catch_mil fishery_full_name  \n   &lt;dbl&gt; &lt;chr&gt;                    &lt;dbl&gt; &lt;chr&gt;              \n 1  1950 artisanal_mil_tons        7.53 Artisanal fishery  \n 2  1950 industrial_mil_tons      14.6  Industrial fishery \n 3  1950 subsistence_mil_tons      2.68 Subsistence fishery\n 4  1951 artisanal_mil_tons        8.28 Artisanal fishery  \n 5  1951 industrial_mil_tons      15.4  Industrial fishery \n 6  1951 subsistence_mil_tons      2.70 Subsistence fishery\n 7  1952 artisanal_mil_tons        8.27 Artisanal fishery  \n 8  1952 industrial_mil_tons      16.5  Industrial fishery \n 9  1952 subsistence_mil_tons      2.73 Subsistence fishery\n10  1953 artisanal_mil_tons        8.47 Artisanal fishery  \n# ℹ 173 more rows",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Cleaning</span>"
    ]
  },
  {
    "objectID": "04_cleaning.html#filtering-the-data-frame-based-on-whats-in-a-column",
    "href": "04_cleaning.html#filtering-the-data-frame-based-on-whats-in-a-column",
    "title": "Cleaning",
    "section": "Filtering the data frame based on what’s in a column",
    "text": "Filtering the data frame based on what’s in a column\n Function: filter()\n Package: dplyr (in tidyverse)\nThis filters the data frame to only include observations after 1980 in the year column.\n\nglobal_catch %&gt;% \n  clean_names() %&gt;% \n  mutate(artisanal_mil_tons = artisanal_small_scale_commercial/1000000,\n         industrial_mil_tons = industrial_large_scale_commercial/1000000,\n         subsistence_mil_tons = subsistence/1000000) %&gt;% \n  select(year, artisanal_mil_tons, industrial_mil_tons, subsistence_mil_tons) %&gt;% \n  pivot_longer(cols = artisanal_mil_tons:subsistence_mil_tons) %&gt;% \n  rename(catch_mil = value,\n         fishery_type = name) %&gt;% \n  mutate(fishery_full_name = case_when(\n    # if the fishery_type is artisanal, then name it \"Artisanal fishery\"\n    fishery_type == \"artisanal_mil_tons\" ~ \"Artisanal fishery\", \n    # if the fishery_type is industrial, then name it \"Industrial fishery\"\n    fishery_type == \"industrial_mil_tons\" ~ \"Industrial fishery\",\n    # if the fishery_type is subsistence, then name it \"Subsistence fishery\"\n    fishery_type == \"subsistence_mil_tons\" ~ \"Subsistence fishery\"\n  )) %&gt;% # same as above\n  \n  # new function: filter\n  # filters data frame for observations after 1980\n  filter(year &gt; 1980)\n\n# A tibble: 90 × 4\n    year fishery_type         catch_mil fishery_full_name  \n   &lt;dbl&gt; &lt;chr&gt;                    &lt;dbl&gt; &lt;chr&gt;              \n 1  1981 artisanal_mil_tons       15.3  Artisanal fishery  \n 2  1981 industrial_mil_tons      62.5  Industrial fishery \n 3  1981 subsistence_mil_tons      3.99 Subsistence fishery\n 4  1982 artisanal_mil_tons       15.2  Artisanal fishery  \n 5  1982 industrial_mil_tons      67.5  Industrial fishery \n 6  1982 subsistence_mil_tons      4.08 Subsistence fishery\n 7  1983 artisanal_mil_tons       15.3  Artisanal fishery  \n 8  1983 industrial_mil_tons      65.7  Industrial fishery \n 9  1983 subsistence_mil_tons      4.20 Subsistence fishery\n10  1984 artisanal_mil_tons       16.1  Artisanal fishery  \n# ℹ 80 more rows",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Cleaning</span>"
    ]
  },
  {
    "objectID": "04_cleaning.html#putting-it-all-together",
    "href": "04_cleaning.html#putting-it-all-together",
    "title": "Cleaning",
    "section": "Putting it all together",
    "text": "Putting it all together\nAll together to create a data frame called global_catch_clean\n\nglobal_catch_clean &lt;- global_catch %&gt;% \n  \n  # makes the column names nicer\n  clean_names() %&gt;% \n  \n  # divides catch by 1000000 to calculate catch in million tons\n  mutate(artisanal_mil_tons = artisanal_small_scale_commercial/1000000,\n         industrial_mil_tons = industrial_large_scale_commercial/1000000,\n         subsistence_mil_tons = subsistence/1000000) %&gt;% \n  \n  # selecting columns\n  select(year, artisanal_mil_tons, industrial_mil_tons, subsistence_mil_tons) %&gt;% \n  \n  # put the data frame in long format: each row is an observation\n  pivot_longer(cols = artisanal_mil_tons:subsistence_mil_tons) %&gt;% \n  \n  # renames columns so that they are easier to understand\n  rename(catch_mil = value,\n         fishery_type = name) %&gt;% \n  \n  # creates new column of full names for fisheries\n  mutate(fishery_full_name = case_when(\n    fishery_type == \"artisanal_mil_tons\" ~ \"Artisanal fishery\",\n    fishery_type == \"industrial_mil_tons\" ~ \"Industrial fishery\",\n    fishery_type == \"subsistence_mil_tons\" ~ \"Subsistence fishery\"\n  )) %&gt;% \n  \n  # filters data frame for observations after 1980\n  filter(year &gt; 1980)\n\nAnd just a quick look at this:\n\nsample_n(global_catch_clean,\n         size = 10)\n\n# A tibble: 10 × 4\n    year fishery_type         catch_mil fishery_full_name  \n   &lt;dbl&gt; &lt;chr&gt;                    &lt;dbl&gt; &lt;chr&gt;              \n 1  2010 artisanal_mil_tons       21.6  Artisanal fishery  \n 2  2005 industrial_mil_tons      83.8  Industrial fishery \n 3  1991 artisanal_mil_tons       17.8  Artisanal fishery  \n 4  2003 industrial_mil_tons      81.0  Industrial fishery \n 5  2000 artisanal_mil_tons       19.7  Artisanal fishery  \n 6  1999 subsistence_mil_tons      4.06 Subsistence fishery\n 7  1998 subsistence_mil_tons      4.03 Subsistence fishery\n 8  1994 subsistence_mil_tons      4.14 Subsistence fishery\n 9  2009 industrial_mil_tons      75.7  Industrial fishery \n10  2002 subsistence_mil_tons      3.88 Subsistence fishery",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Cleaning</span>"
    ]
  },
  {
    "objectID": "05_visualizing.html",
    "href": "05_visualizing.html",
    "title": "Visualizing your data",
    "section": "",
    "text": "Visually exploring your data\nExploring your data is a great way of getting to know it. There are a few basic ways you can visualize depending on what your variables are:",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Visualizing your data</span>"
    ]
  },
  {
    "objectID": "05_visualizing.html#visually-exploring-your-data",
    "href": "05_visualizing.html#visually-exploring-your-data",
    "title": "Visualizing your data",
    "section": "",
    "text": "If you want to know how your variable is distributed, you can make a histogram.\n\nIf you want to know how a variable differs between groups, you can make a boxplot or a jitter plot.\n\nIf you want to know how two continuous variables relate to each other, you can make a scatterplot.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Visualizing your data</span>"
    ]
  },
  {
    "objectID": "05_visualizing.html#tools",
    "href": "05_visualizing.html#tools",
    "title": "Visualizing your data",
    "section": "Tools",
    "text": "Tools\nWe’ll use ggplot() from the ggplot2 package in the tidyverse for these examples!\n\n\n\n\n\n\nMaking your ggplot() objects look cohesive\n\n\n\nI like to use theme_set() to set a global “look” for my plots. This ensures that every plot in the document has the same basic aesthetic changes, while still leaving room for customization in each plot.\nIn a code chunk at the beginning of your document, you can use theme_set() to apply theme() elements to all the plots you make:\n\ntheme_set(\n theme_bw() + # cleaner theme\n theme(panel.grid = element_blank(), # taking the gridlines out\n       text = element_text(size = 16)) # making the text bigger\n)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Visualizing your data</span>"
    ]
  },
  {
    "objectID": "05_visualizing.html#exploring-distributions-using-histograms",
    "href": "05_visualizing.html#exploring-distributions-using-histograms",
    "title": "Visualizing your data",
    "section": "Exploring distributions using histograms",
    "text": "Exploring distributions using histograms\nFor this example, we’ll create a histogram for the artisanal fishery.\n Function: geom_histogram()\n\nartisanal &lt;- global_catch_clean %&gt;% \n  # filtering for artisanal fishery only\n  filter(fishery_type == \"artisanal_mil_tons\")\n\n# global ggplot call\nggplot(data = artisanal, # the data frame\n       aes(x = catch_mil)) + # the x-axis\n  \n  # creating a histogram\n  geom_histogram(bins = 7, # number of columns/bins\n                 alpha = 0.7, # making the bars a little transparent\n                 fill = \"#004c4c\", # filling the bars \n                 color = \"#004c4c\") + # outline of the bars\n  \n  # extra stuff to make your plot look nicer\n  scale_y_continuous(expand = c(0, 0), # gets rid of the space below the bars\n                     limits = c(0, 10)) + # sets the limits of the y-axis \n  # labelling the x- and y-axes\n  labs(x = \"Catch (million tons)\",\n       y = \"Count\")",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Visualizing your data</span>"
    ]
  },
  {
    "objectID": "05_visualizing.html#exploring-differences-between-groups-using-jitter-plots",
    "href": "05_visualizing.html#exploring-differences-between-groups-using-jitter-plots",
    "title": "Visualizing your data",
    "section": "Exploring differences between groups using jitter plots",
    "text": "Exploring differences between groups using jitter plots\n Function: geom_jitter()\n\n\n\n\n\n\nHow jitters work\n\n\n\ngeom_jitter() randomly shakes points left and right and up and down to make them easier to see. This is fine, but sometimes weird to have a jitter applied up and down when the y-axis actually represents a value that you’re interested in.\nBelow are two ways of creating a jitter plot: the simple way (with no customization for where the jittered points go), and the more custom way (where you can control the position of the jittered points relative to the x- and y-axes).\n\n\nSimple jitter (no customization):\n\n# simple way to create a jitter plot\nggplot(data = global_catch_clean, # data frame\n       aes(x = fishery_full_name, # x-axis\n           y = catch_mil)) + # y-axis\n  geom_jitter()\n\n\n\n\n\n\n\n\nCustom jitter with position = position_jitter():\n\n# a way with a little more control over the jitter\nggplot(data = global_catch_clean, # data frame\n       aes(x = fishery_full_name, # x-axis\n           y = catch_mil, # y-axis\n           color = fishery_full_name)) + # coloring points by fishery - this is required for the scale_color_manual code to work!\n  geom_jitter(position = position_jitter(\n    width = 0.2, # shakes the points around left and right \n    height = 0, # doesn't shake the points up and down\n    seed = 1)) + # makes sure the \"random\" arrangement stays the same\n \n  # extra stuff to make the plot look nicer\n  # controlling the color of the points\n  scale_color_manual(values = c(\"Artisanal fishery\" = \"#008080\",\n                                \"Industrial fishery\" = \"#004c4c\",\n                                \"Subsistence fishery\" = \"#b2d8d8\")) +\n  # labeling the y-axis\n  labs(y = \"Catch (million tons)\") +\n  theme(legend.position = \"none\", # taking out the legend\n        axis.title.x = element_blank()) # taking out the x-axis title (redundant)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Visualizing your data</span>"
    ]
  },
  {
    "objectID": "05_visualizing.html#exploring-differences-between-groups-using-boxplots",
    "href": "05_visualizing.html#exploring-differences-between-groups-using-boxplots",
    "title": "Visualizing your data",
    "section": "Exploring differences between groups using boxplots",
    "text": "Exploring differences between groups using boxplots\n Function: geom_boxplot()\nA boxplot shows the median of a group, the interquartile range, and 1.5x the interquartile range.\n\nggplot(data = global_catch_clean, # data frame\n       aes(x = fishery_full_name, # x-axis\n           y = catch_mil, # y-axis\n           fill = fishery_full_name)) + # filling the boxplot by fishery, again needed for the scale_fill_manual code to work!\n  geom_boxplot() +\n\n  # extra stuff to make the plot look nicer\n  # controlling the fill of the boxplots\n  scale_fill_manual(values = c(\"Artisanal fishery\" = \"#008080\",\n                                \"Industrial fishery\" = \"#004c4c\",\n                                \"Subsistence fishery\" = \"#b2d8d8\")) +\n  # labeling the y-axis\n  labs(y = \"Catch (million tons)\") +\n  theme(legend.position = \"none\", # taking out the legend\n        axis.title.x = element_blank()) # taking out the x-axis title (redundant)",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Visualizing your data</span>"
    ]
  },
  {
    "objectID": "05_visualizing.html#exploring-relationships-between-variables-using-scaterplots",
    "href": "05_visualizing.html#exploring-relationships-between-variables-using-scaterplots",
    "title": "Visualizing your data",
    "section": "Exploring relationships between variables using scaterplots",
    "text": "Exploring relationships between variables using scaterplots\n Function: geom_point()\nIn this example, the x-axis is year and the y-axis is catch (million tons), but you can explore any continuous variables this way!\n\nggplot(data = global_catch_clean, # data frame\n       aes(x = year, # x-axis\n           y = catch_mil, # y-axis\n           color = fishery_full_name)) + # coloring by fishery \n  geom_point() +\n\n  # extra stuff to make the plot look nicer\n  # controlling the color of the points\n  scale_color_manual(values = c(\"Artisanal fishery\" = \"#008080\",\n                                \"Industrial fishery\" = \"#004c4c\",\n                                \"Subsistence fishery\" = \"#b2d8d8\")) +\n  # labeling the y-axis and the legend\n  labs(x = \"Year\",\n       y = \"Catch (million tons)\",\n       color = \"Fishery type\")",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Visualizing your data</span>"
    ]
  }
]